{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reset = reset;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _Drawer = _interopRequireWildcard(require(\"../Drawer/Drawer\"));\n\nvar _transitions = require(\"../styles/transitions\");\n\nvar _withTheme = _interopRequireDefault(require(\"../styles/withTheme\"));\n\nvar _utils = require(\"../transitions/utils\");\n\nvar _NoSsr = _interopRequireDefault(require(\"../NoSsr\"));\n\nvar _SwipeArea = _interopRequireDefault(require(\"./SwipeArea\"));\n/* eslint-disable consistent-this */\n// @inheritedComponent Drawer\n// This value is closed to what browsers are using internally to\n// trigger a native scroll.\n\n\nvar UNCERTAINTY_THRESHOLD = 3; // px\n// We can only have one node at the time claiming ownership for handling the swipe.\n// Otherwise, the UX would be confusing.\n// That's why we use a singleton here.\n\nvar nodeThatClaimedTheSwipe = null; // Exported for test purposes.\n\nfunction reset() {\n  nodeThatClaimedTheSwipe = null;\n}\n/* istanbul ignore if */\n\n\nif (process.env.NODE_ENV !== 'production' && !_react.default.createContext) {\n  throw new Error('Material-UI: react@16.3.0 or greater is required.');\n}\n\nvar SwipeableDrawer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(SwipeableDrawer, _React$Component);\n\n  function SwipeableDrawer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, SwipeableDrawer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(SwipeableDrawer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {};\n    _this.isSwiping = null;\n\n    _this.handleBodyTouchStart = function (event) {\n      // We are not supposed to hanlde this touch move.\n      if (nodeThatClaimedTheSwipe !== null && nodeThatClaimedTheSwipe !== (0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this))) {\n        return;\n      }\n\n      var _this$props = _this.props,\n          disableDiscovery = _this$props.disableDiscovery,\n          disableSwipeToOpen = _this$props.disableSwipeToOpen,\n          open = _this$props.open,\n          swipeAreaWidth = _this$props.swipeAreaWidth;\n      var anchor = (0, _Drawer.getAnchor)(_this.props);\n      var currentX = anchor === 'right' ? document.body.offsetWidth - event.touches[0].pageX : event.touches[0].pageX;\n      var currentY = anchor === 'bottom' ? window.innerHeight - event.touches[0].clientY : event.touches[0].clientY;\n\n      if (!open) {\n        if (disableSwipeToOpen) {\n          return;\n        }\n\n        if ((0, _Drawer.isHorizontal)(_this.props)) {\n          if (currentX > swipeAreaWidth) {\n            return;\n          }\n        } else if (currentY > swipeAreaWidth) {\n          return;\n        }\n      }\n\n      nodeThatClaimedTheSwipe = (0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this));\n      _this.startX = currentX;\n      _this.startY = currentY;\n\n      _this.setState({\n        maybeSwiping: true\n      });\n\n      if (!open && _this.paperRef) {\n        // The ref may be null when a parent component updates while swiping.\n        _this.setPosition(_this.getMaxTranslate() + (disableDiscovery ? 20 : -swipeAreaWidth), {\n          changeTransition: false\n        });\n      }\n\n      _this.velocity = 0;\n      _this.lastTime = null;\n      _this.lastTranslate = null;\n      document.body.addEventListener('touchmove', _this.handleBodyTouchMove, {\n        passive: false\n      });\n      document.body.addEventListener('touchend', _this.handleBodyTouchEnd); // https://plus.google.com/+PaulIrish/posts/KTwfn1Y2238\n\n      document.body.addEventListener('touchcancel', _this.handleBodyTouchEnd);\n    };\n\n    _this.handleBodyTouchMove = function (event) {\n      // the ref may be null when a parent component updates while swiping\n      if (!_this.paperRef) return;\n      var anchor = (0, _Drawer.getAnchor)(_this.props);\n      var horizontalSwipe = (0, _Drawer.isHorizontal)(_this.props);\n      var currentX = anchor === 'right' ? document.body.offsetWidth - event.touches[0].pageX : event.touches[0].pageX;\n      var currentY = anchor === 'bottom' ? window.innerHeight - event.touches[0].clientY : event.touches[0].clientY; // We don't know yet.\n\n      if (_this.isSwiping == null) {\n        var dx = Math.abs(currentX - _this.startX);\n        var dy = Math.abs(currentY - _this.startY); // We are likely to be swiping, let's prevent the scroll event on iOS.\n\n        if (dx > dy) {\n          event.preventDefault();\n        }\n\n        var isSwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;\n\n        if (isSwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {\n          _this.isSwiping = isSwiping;\n\n          if (!isSwiping) {\n            _this.handleBodyTouchEnd(event);\n\n            return;\n          } // Shift the starting point.\n\n\n          _this.startX = currentX;\n          _this.startY = currentY; // Compensate for the part of the drawer displayed on touch start.\n\n          if (!_this.props.disableDiscovery && !_this.props.open) {\n            if (horizontalSwipe) {\n              _this.startX -= _this.props.swipeAreaWidth;\n            } else {\n              _this.startY -= _this.props.swipeAreaWidth;\n            }\n          }\n        }\n      }\n\n      if (!_this.isSwiping) {\n        return;\n      }\n\n      var translate = _this.getTranslate(horizontalSwipe ? currentX : currentY);\n\n      if (_this.lastTranslate === null) {\n        _this.lastTranslate = translate;\n        _this.lastTime = performance.now() + 1;\n      }\n\n      var velocity = (translate - _this.lastTranslate) / (performance.now() - _this.lastTime) * 1e3; // Low Pass filter.\n\n      _this.velocity = _this.velocity * 0.4 + velocity * 0.6;\n      _this.lastTranslate = translate;\n      _this.lastTime = performance.now(); // We are swiping, let's prevent the scroll event on iOS.\n\n      event.preventDefault();\n\n      _this.setPosition(translate);\n    };\n\n    _this.handleBodyTouchEnd = function (event) {\n      nodeThatClaimedTheSwipe = null;\n\n      _this.removeBodyTouchListeners();\n\n      _this.setState({\n        maybeSwiping: false\n      }); // The swipe wasn't started.\n\n\n      if (!_this.isSwiping) {\n        _this.isSwiping = null;\n        return;\n      }\n\n      _this.isSwiping = null;\n      var anchor = (0, _Drawer.getAnchor)(_this.props);\n      var current;\n\n      if ((0, _Drawer.isHorizontal)(_this.props)) {\n        current = anchor === 'right' ? document.body.offsetWidth - event.changedTouches[0].pageX : event.changedTouches[0].pageX;\n      } else {\n        current = anchor === 'bottom' ? window.innerHeight - event.changedTouches[0].clientY : event.changedTouches[0].clientY;\n      }\n\n      var translateRatio = _this.getTranslate(current) / _this.getMaxTranslate();\n\n      if (_this.props.open) {\n        if (_this.velocity > _this.props.minFlingVelocity || translateRatio > _this.props.hysteresis) {\n          _this.props.onClose();\n        } else {\n          // Reset the position, the swipe was aborted.\n          _this.setPosition(0, {\n            mode: 'exit'\n          });\n        }\n\n        return;\n      }\n\n      if (_this.velocity < -_this.props.minFlingVelocity || 1 - translateRatio > _this.props.hysteresis) {\n        _this.props.onOpen();\n      } else {\n        // Reset the position, the swipe was aborted.\n        _this.setPosition(_this.getMaxTranslate(), {\n          mode: 'enter'\n        });\n      }\n    };\n\n    _this.handleBackdropRef = function (ref) {\n      _this.backdropRef = ref ? _reactDom.default.findDOMNode(ref) : null;\n    };\n\n    _this.handlePaperRef = function (ref) {\n      _this.paperRef = ref ? _reactDom.default.findDOMNode(ref) : null;\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(SwipeableDrawer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.variant === 'temporary') {\n        this.listenTouchStart();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var variant = this.props.variant;\n      var prevVariant = prevProps.variant;\n\n      if (variant !== prevVariant) {\n        if (variant === 'temporary') {\n          this.listenTouchStart();\n        } else if (prevVariant === 'temporary') {\n          this.removeTouchStart();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.removeTouchStart();\n      this.removeBodyTouchListeners(); // We need to release the lock.\n\n      if (nodeThatClaimedTheSwipe === this) {\n        nodeThatClaimedTheSwipe = null;\n      }\n    }\n  }, {\n    key: \"getMaxTranslate\",\n    value: function getMaxTranslate() {\n      return (0, _Drawer.isHorizontal)(this.props) ? this.paperRef.clientWidth : this.paperRef.clientHeight;\n    }\n  }, {\n    key: \"getTranslate\",\n    value: function getTranslate(current) {\n      var start = (0, _Drawer.isHorizontal)(this.props) ? this.startX : this.startY;\n      return Math.min(Math.max(this.props.open ? start - current : this.getMaxTranslate() + start - current, 0), this.getMaxTranslate());\n    }\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(translate) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$mode = options.mode,\n          mode = _options$mode === void 0 ? null : _options$mode,\n          _options$changeTransi = options.changeTransition,\n          changeTransition = _options$changeTransi === void 0 ? true : _options$changeTransi;\n      var anchor = (0, _Drawer.getAnchor)(this.props);\n      var rtlTranslateMultiplier = ['right', 'bottom'].indexOf(anchor) !== -1 ? 1 : -1;\n      var transform = (0, _Drawer.isHorizontal)(this.props) ? \"translate(\".concat(rtlTranslateMultiplier * translate, \"px, 0)\") : \"translate(0, \".concat(rtlTranslateMultiplier * translate, \"px)\");\n      var drawerStyle = this.paperRef.style;\n      drawerStyle.webkitTransform = transform;\n      drawerStyle.transform = transform;\n      var transition = '';\n\n      if (mode) {\n        transition = this.props.theme.transitions.create('all', (0, _utils.getTransitionProps)({\n          timeout: this.props.transitionDuration\n        }, {\n          mode: mode\n        }));\n      }\n\n      if (changeTransition) {\n        drawerStyle.webkitTransition = transition;\n        drawerStyle.transition = transition;\n      }\n\n      if (!this.props.disableBackdropTransition && !this.props.hideBackdrop) {\n        var backdropStyle = this.backdropRef.style;\n        backdropStyle.opacity = 1 - translate / this.getMaxTranslate();\n\n        if (changeTransition) {\n          backdropStyle.webkitTransition = transition;\n          backdropStyle.transition = transition;\n        }\n      }\n    }\n  }, {\n    key: \"listenTouchStart\",\n    value: function listenTouchStart() {\n      document.body.addEventListener('touchstart', this.handleBodyTouchStart);\n    }\n  }, {\n    key: \"removeTouchStart\",\n    value: function removeTouchStart() {\n      document.body.removeEventListener('touchstart', this.handleBodyTouchStart);\n    }\n  }, {\n    key: \"removeBodyTouchListeners\",\n    value: function removeBodyTouchListeners() {\n      document.body.removeEventListener('touchmove', this.handleBodyTouchMove, {\n        passive: false\n      });\n      document.body.removeEventListener('touchend', this.handleBodyTouchEnd);\n      document.body.removeEventListener('touchcancel', this.handleBodyTouchEnd);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          anchor = _this$props2.anchor,\n          disableBackdropTransition = _this$props2.disableBackdropTransition,\n          disableDiscovery = _this$props2.disableDiscovery,\n          disableSwipeToOpen = _this$props2.disableSwipeToOpen,\n          hysteresis = _this$props2.hysteresis,\n          minFlingVelocity = _this$props2.minFlingVelocity,\n          _this$props2$ModalPro = _this$props2.ModalProps;\n      _this$props2$ModalPro = _this$props2$ModalPro === void 0 ? {} : _this$props2$ModalPro;\n      var BackdropProps = _this$props2$ModalPro.BackdropProps,\n          ModalPropsProp = (0, _objectWithoutProperties2.default)(_this$props2$ModalPro, [\"BackdropProps\"]),\n          onOpen = _this$props2.onOpen,\n          open = _this$props2.open,\n          _this$props2$PaperPro = _this$props2.PaperProps,\n          PaperProps = _this$props2$PaperPro === void 0 ? {} : _this$props2$PaperPro,\n          swipeAreaWidth = _this$props2.swipeAreaWidth,\n          variant = _this$props2.variant,\n          other = (0, _objectWithoutProperties2.default)(_this$props2, [\"anchor\", \"disableBackdropTransition\", \"disableDiscovery\", \"disableSwipeToOpen\", \"hysteresis\", \"minFlingVelocity\", \"ModalProps\", \"onOpen\", \"open\", \"PaperProps\", \"swipeAreaWidth\", \"variant\"]);\n      var maybeSwiping = this.state.maybeSwiping;\n      return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_Drawer.default, (0, _extends2.default)({\n        open: variant === 'temporary' && maybeSwiping ? true : open,\n        variant: variant,\n        ModalProps: (0, _extends2.default)({\n          BackdropProps: (0, _extends2.default)({}, BackdropProps, {\n            ref: this.handleBackdropRef\n          })\n        }, ModalPropsProp),\n        PaperProps: (0, _extends2.default)({}, PaperProps, {\n          style: (0, _extends2.default)({\n            pointerEvents: variant === 'temporary' && !open ? 'none' : ''\n          }, PaperProps.style),\n          ref: this.handlePaperRef\n        }),\n        anchor: anchor\n      }, other)), !disableDiscovery && !disableSwipeToOpen && variant === 'temporary' && _react.default.createElement(_NoSsr.default, null, _react.default.createElement(_SwipeArea.default, {\n        anchor: anchor,\n        width: swipeAreaWidth\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (typeof prevState.maybeSwiping === 'undefined') {\n        return {\n          maybeSwiping: false,\n          open: nextProps.open\n        };\n      }\n\n      if (!nextProps.open && prevState.open) {\n        return {\n          maybeSwiping: false,\n          open: nextProps.open\n        };\n      }\n\n      return {\n        open: nextProps.open\n      };\n    }\n  }]);\n  return SwipeableDrawer;\n}(_react.default.Component);\n\nSwipeableDrawer.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * @ignore\n   */\n  anchor: _propTypes.default.oneOf(['left', 'top', 'right', 'bottom']),\n\n  /**\n   * Disable the backdrop transition.\n   * This can improve the FPS on low-end devices.\n   */\n  disableBackdropTransition: _propTypes.default.bool,\n\n  /**\n   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\n   * to promote accidental discovery of the swipe gesture.\n   */\n  disableDiscovery: _propTypes.default.bool,\n\n  /**\n   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\n   * navigation actions. Swipe to open is disabled on iOS browsers by default.\n   */\n  disableSwipeToOpen: _propTypes.default.bool,\n\n  /**\n   * Affects how far the drawer must be opened/closed to change his state.\n   * Specified as percent (0-1) of the width of the drawer\n   */\n  hysteresis: _propTypes.default.number,\n\n  /**\n   * Defines, from which (average) velocity on, the swipe is\n   * defined as complete although hysteresis isn't reached.\n   * Good threshold is between 250 - 1000 px/s\n   */\n  minFlingVelocity: _propTypes.default.number,\n\n  /**\n   * @ignore\n   */\n  ModalProps: _propTypes.default.object,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback\n   */\n  onClose: _propTypes.default.func.isRequired,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   *\n   * @param {object} event The event source of the callback\n   */\n  onOpen: _propTypes.default.func.isRequired,\n\n  /**\n   * If `true`, the drawer is open.\n   */\n  open: _propTypes.default.bool.isRequired,\n\n  /**\n   * @ignore\n   */\n  PaperProps: _propTypes.default.object,\n\n  /**\n   * The width of the left most (or right most) area in pixels where the\n   * drawer can be swiped open from.\n   */\n  swipeAreaWidth: _propTypes.default.number,\n\n  /**\n   * @ignore\n   */\n  theme: _propTypes.default.object.isRequired,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  transitionDuration: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({\n    enter: _propTypes.default.number,\n    exit: _propTypes.default.number\n  })]),\n\n  /**\n   * @ignore\n   */\n  variant: _propTypes.default.oneOf(['permanent', 'persistent', 'temporary'])\n} : {};\nSwipeableDrawer.defaultProps = {\n  anchor: 'left',\n  disableBackdropTransition: false,\n  disableDiscovery: false,\n  disableSwipeToOpen: typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent),\n  hysteresis: 0.55,\n  minFlingVelocity: 400,\n  swipeAreaWidth: 20,\n  transitionDuration: {\n    enter: _transitions.duration.enteringScreen,\n    exit: _transitions.duration.leavingScreen\n  },\n  variant: 'temporary' // Mobile first.\n\n};\n\nvar _default = (0, _withTheme.default)()(SwipeableDrawer);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}