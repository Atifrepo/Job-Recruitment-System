{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule TapEventPlugin\n * @flow\n */\n'use strict';\n\nvar EventPropagators = require('react-dom').__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.EventPropagators;\n\nvar TouchEventUtils = require('fbjs/lib/TouchEventUtils');\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\nfunction isEndish(topLevelType) {\n  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';\n}\n\nfunction isStartish(topLevelType) {\n  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';\n}\n/**\n * Number of pixels that are tolerated in between a `touchStart` and `touchEnd`\n * in order to still be considered a 'tap' event.\n */\n\n\nvar tapMoveThreshold = 10;\nvar startCoords = {\n  x: 0,\n  y: 0\n};\nvar Axis = {\n  x: {\n    page: 'pageX',\n    client: 'clientX',\n    envScroll: 'currentPageScrollLeft'\n  },\n  y: {\n    page: 'pageY',\n    client: 'clientY',\n    envScroll: 'currentPageScrollTop'\n  }\n};\n\nfunction getAxisCoordOfEvent(axis, nativeEvent) {\n  var singleTouch = TouchEventUtils.extractSingleTouch(nativeEvent);\n\n  if (singleTouch) {\n    return singleTouch[axis.page];\n  }\n\n  return nativeEvent[axis.page];\n}\n\nfunction getDistance(coords, nativeEvent) {\n  var pageX = getAxisCoordOfEvent(Axis.x, nativeEvent);\n  var pageY = getAxisCoordOfEvent(Axis.y, nativeEvent);\n  return Math.pow(Math.pow(pageX - coords.x, 2) + Math.pow(pageY - coords.y, 2), 0.5);\n}\n\nvar touchEvents = ['topTouchStart', 'topTouchCancel', 'topTouchEnd', 'topTouchMove'];\nvar dependencies = ['topMouseDown', 'topMouseMove', 'topMouseUp'].concat(touchEvents);\nvar eventTypes = {\n  touchTap: {\n    phasedRegistrationNames: {\n      bubbled: 'onTouchTap',\n      captured: 'onTouchTapCapture'\n    },\n    dependencies: dependencies\n  }\n};\nvar usedTouchTime = 0; // var TapEventPlugin = {\n\nfunction createTapEventPlugin(shouldRejectClick) {\n  return {\n    tapMoveThreshold: tapMoveThreshold,\n    eventTypes: eventTypes,\n    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n      if (!isStartish(topLevelType) && !isEndish(topLevelType)) {\n        return null;\n      } // on ios, there is a delay after touch event and synthetic\n      // mouse events, so that user can perform double tap\n      // solution: ignore mouse events following touchevent within small timeframe\n\n\n      if (touchEvents.indexOf(topLevelType) !== -1) {\n        usedTouchTime = Date.now();\n      } else {\n        if (shouldRejectClick(usedTouchTime, Date.now())) {\n          return null;\n        }\n      }\n\n      var event = null;\n      var distance = getDistance(startCoords, nativeEvent);\n\n      if (isEndish(topLevelType) && distance < tapMoveThreshold) {\n        event = SyntheticEvent.getPooled(eventTypes.touchTap, targetInst, nativeEvent, nativeEventTarget);\n      }\n\n      if (isStartish(topLevelType)) {\n        startCoords.x = getAxisCoordOfEvent(Axis.x, nativeEvent);\n        startCoords.y = getAxisCoordOfEvent(Axis.y, nativeEvent);\n      } else if (isEndish(topLevelType)) {\n        startCoords.x = 0;\n        startCoords.y = 0;\n      }\n\n      EventPropagators.accumulateTwoPhaseDispatches(event);\n      return event;\n    }\n  };\n}\n\nmodule.exports = createTapEventPlugin;","map":null,"metadata":{},"sourceType":"script"}