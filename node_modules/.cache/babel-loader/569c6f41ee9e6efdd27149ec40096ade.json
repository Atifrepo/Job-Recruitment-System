{"ast":null,"code":"import _classCallCheck from \"/home/atif/hello-world/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/atif/hello-world/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/atif/hello-world/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/atif/hello-world/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/atif/hello-world/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/atif/hello-world/src/MyPostJobs.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport * as firebase from 'firebase';\n\nvar MyPostJobs =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MyPostJobs, _Component);\n\n  function MyPostJobs() {\n    var _this;\n\n    _classCallCheck(this, MyPostJobs);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MyPostJobs).call(this));\n    _this.state = {\n      id: 0,\n      JobInfo: [{\n        CompanyId: '',\n        jobtitle: '',\n        description: '',\n        salary: ''\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(MyPostJobs, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      console.log(\"in did mount job post\");\n      var uid = firebase.auth().currentUser.uid;\n      var rootRef = firebase.database().ref();\n      var speedRef = rootRef.child('Job/');\n      speedRef.on('value', function (snap) {\n        var userobj = snap.val();\n        var key = Object.keys(userobj);\n\n        _this2.setState({\n          key: key\n        });\n\n        for (var i = 0; i < key.length; i++) {\n          var k = key[i];\n\n          if (uid == userobj[k].CompanyId) {\n            _this2.state.jobtitle[i] = userobj[k].jobtitle;\n            _this2.state.description[i] = userobj[k].description;\n            _this2.state.salary[i] = userobj[k].salary;\n          }\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log('jobtitle', this.state.jobtitle);\n      console.log('description', this.state.description);\n      console.log('salary', this.state.salary);\n      return React.createElement(Paper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(Table, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(TableHead, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Company Name\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Job Title\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Description\"), React.createElement(TableCell, {\n        numeric: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Salary\"))), React.createElement(TableBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, this.state.JobInfo.map(function (row) {\n        return React.createElement(TableRow, {\n          key: row.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, row.CompanyId), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, row.jobtitle), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, row.description), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, row.salary));\n      }))));\n    }\n  }]);\n\n  return MyPostJobs;\n}(Component);\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      width: '100%',\n      marginTop: theme.spacing.unit * 3,\n      overflowX: 'auto'\n    },\n    table: {\n      minWidth: 700\n    }\n  };\n};\n\nexport default withStyles(styles)(MyPostJobs);","map":{"version":3,"sources":["/home/atif/hello-world/src/MyPostJobs.js"],"names":["React","Component","PropTypes","withStyles","Table","TableBody","TableCell","TableHead","TableRow","Paper","firebase","MyPostJobs","state","id","JobInfo","CompanyId","jobtitle","description","salary","console","log","uid","auth","currentUser","rootRef","database","ref","speedRef","child","on","snap","userobj","val","key","Object","keys","setState","i","length","k","map","row","styles","theme","root","width","marginTop","spacing","unit","overflowX","table","minWidth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport *as firebase from 'firebase';\n\n\nclass MyPostJobs extends Component {\n    constructor() {\n        super();\n        this.state = {\n            id: 0,\n            JobInfo: [{\n                CompanyId: '', jobtitle: '', description: '', salary: ''\n            }]\n\n        }\n    }\n\n    componentDidMount() {\n        console.log(\"in did mount job post\")\n        var uid = firebase.auth().currentUser.uid;\n        const rootRef = firebase.database().ref();\n        const speedRef = rootRef.child('Job/');\n        speedRef.on('value', snap => {\n            var userobj = snap.val();\n            var key = Object.keys(userobj);\n            this.setState({ key })\n            for (var i = 0; i < key.length; i++) {\n                var k = key[i];\n                if (uid == userobj[k].CompanyId) {\n                    this.state.jobtitle[i] = userobj[k].jobtitle;\n                    this.state.description[i] = userobj[k].description;\n                    this.state.salary[i] = userobj[k].salary;\n                }\n            }\n        }\n\n        )\n    }\n\n    render() {\n        console.log('jobtitle', this.state.jobtitle)\n        console.log('description', this.state.description)\n        console.log('salary', this.state.salary)\n        return (\n\n            <Paper>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Company Name</TableCell>\n                            <TableCell >Job Title</TableCell>\n                            <TableCell >Description</TableCell>\n                            <TableCell numeric>Salary</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {this.state.JobInfo.map(row => {\n                            return (\n                                <TableRow key={row.id}>\n\n                                    <TableCell >{row.CompanyId}</TableCell>\n                                    <TableCell >{row.jobtitle}</TableCell>\n                                    <TableCell >{row.description}</TableCell>\n                                    <TableCell >{row.salary}</TableCell>\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </Paper>\n        )\n    }\n\n}\n\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        marginTop: theme.spacing.unit * 3,\n        overflowX: 'auto',\n    },\n    table: {\n        minWidth: 700,\n    },\n});\n\n\nexport default withStyles(styles)(MyPostJobs);"]},"metadata":{},"sourceType":"module"}