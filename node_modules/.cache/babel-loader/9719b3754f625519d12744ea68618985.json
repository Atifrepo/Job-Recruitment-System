{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _simpleAssign = require('simple-assign');\n\nvar _simpleAssign2 = _interopRequireDefault(_simpleAssign);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _reactEventListener = require('react-event-listener');\n\nvar _reactEventListener2 = _interopRequireDefault(_reactEventListener);\n\nvar _keycode = require('keycode');\n\nvar _keycode2 = _interopRequireDefault(_keycode);\n\nvar _transitions = require('../styles/transitions');\n\nvar _transitions2 = _interopRequireDefault(_transitions);\n\nvar _Overlay = require('../internal/Overlay');\n\nvar _Overlay2 = _interopRequireDefault(_Overlay);\n\nvar _RenderToLayer = require('../internal/RenderToLayer');\n\nvar _RenderToLayer2 = _interopRequireDefault(_RenderToLayer);\n\nvar _Paper = require('../Paper');\n\nvar _Paper2 = _interopRequireDefault(_Paper);\n\nvar _TransitionGroup = require('react-transition-group/TransitionGroup');\n\nvar _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar TransitionItem = function (_Component) {\n  (0, _inherits3.default)(TransitionItem, _Component);\n\n  function TransitionItem() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, TransitionItem);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TransitionItem.__proto__ || (0, _getPrototypeOf2.default)(TransitionItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      style: {}\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  (0, _createClass3.default)(TransitionItem, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      clearTimeout(this.enterTimeout);\n      clearTimeout(this.leaveTimeout);\n    }\n  }, {\n    key: 'componentWillEnter',\n    value: function componentWillEnter(callback) {\n      this.componentWillAppear(callback);\n    }\n  }, {\n    key: 'componentWillAppear',\n    value: function componentWillAppear(callback) {\n      var spacing = this.context.muiTheme.baseTheme.spacing;\n      this.setState({\n        style: {\n          opacity: 1,\n          transform: 'translate(0, ' + spacing.desktopKeylineIncrement + 'px)'\n        }\n      });\n      this.enterTimeout = setTimeout(callback, 450); // matches transition duration\n    }\n  }, {\n    key: 'componentWillLeave',\n    value: function componentWillLeave(callback) {\n      this.setState({\n        style: {\n          opacity: 0,\n          transform: 'translate(0, 0)'\n        }\n      });\n      this.leaveTimeout = setTimeout(callback, 450); // matches transition duration\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          style = _props.style,\n          children = _props.children,\n          other = (0, _objectWithoutProperties3.default)(_props, ['style', 'children']);\n      var prepareStyles = this.context.muiTheme.prepareStyles;\n      return _react2.default.createElement('div', (0, _extends3.default)({}, other, {\n        style: prepareStyles((0, _simpleAssign2.default)({}, this.state.style, style))\n      }), children);\n    }\n  }]);\n  return TransitionItem;\n}(_react.Component);\n\nTransitionItem.contextTypes = {\n  muiTheme: _propTypes2.default.object.isRequired\n};\nTransitionItem.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: _propTypes2.default.node,\n  style: _propTypes2.default.object\n} : {};\n\nfunction getStyles(props, context) {\n  var autoScrollBodyContent = props.autoScrollBodyContent,\n      open = props.open;\n  var _context$muiTheme = context.muiTheme,\n      _context$muiTheme$bas = _context$muiTheme.baseTheme,\n      spacing = _context$muiTheme$bas.spacing,\n      palette = _context$muiTheme$bas.palette,\n      dialog = _context$muiTheme.dialog,\n      zIndex = _context$muiTheme.zIndex;\n  var gutter = spacing.desktopGutter;\n  var borderScroll = '1px solid ' + palette.borderColor;\n  return {\n    root: {\n      position: 'fixed',\n      boxSizing: 'border-box',\n      WebkitTapHighlightColor: 'rgba(0,0,0,0)',\n      // Remove mobile color flashing (deprecated)\n      zIndex: zIndex.dialog,\n      top: 0,\n      left: open ? 0 : -10000,\n      width: '100%',\n      height: '100%',\n      transition: open ? _transitions2.default.easeOut('0ms', 'left', '0ms') : _transitions2.default.easeOut('0ms', 'left', '450ms')\n    },\n    content: {\n      boxSizing: 'border-box',\n      WebkitTapHighlightColor: 'rgba(0,0,0,0)',\n      // Remove mobile color flashing (deprecated)\n      transition: _transitions2.default.easeOut(),\n      position: 'relative',\n      width: '75%',\n      maxWidth: spacing.desktopKeylineIncrement * 12,\n      margin: '0 auto',\n      zIndex: zIndex.dialog\n    },\n    actionsContainer: {\n      boxSizing: 'border-box',\n      WebkitTapHighlightColor: 'rgba(0,0,0,0)',\n      // Remove mobile color flashing (deprecated)\n      padding: 8,\n      width: '100%',\n      textAlign: 'right',\n      marginTop: autoScrollBodyContent ? -1 : 0\n    },\n    overlay: {\n      zIndex: zIndex.dialogOverlay\n    },\n    title: {\n      margin: 0,\n      padding: gutter + 'px ' + gutter + 'px 20px ' + gutter + 'px',\n      color: palette.textColor,\n      fontSize: dialog.titleFontSize,\n      lineHeight: '32px',\n      fontWeight: 400,\n      marginBottom: autoScrollBodyContent ? -1 : 0\n    },\n    body: {\n      fontSize: dialog.bodyFontSize,\n      color: dialog.bodyColor,\n      padding: (props.title ? 0 : gutter) + 'px ' + gutter + 'px ' + gutter + 'px',\n      boxSizing: 'border-box',\n      overflowY: autoScrollBodyContent ? 'auto' : 'hidden',\n      borderTop: autoScrollBodyContent ? borderScroll : 'none',\n      borderBottom: autoScrollBodyContent ? borderScroll : 'none'\n    }\n  };\n}\n\nvar DialogInline = function (_Component2) {\n  (0, _inherits3.default)(DialogInline, _Component2);\n\n  function DialogInline() {\n    var _ref2;\n\n    var _temp2, _this2, _ret2;\n\n    (0, _classCallCheck3.default)(this, DialogInline);\n\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return _ret2 = (_temp2 = (_this2 = (0, _possibleConstructorReturn3.default)(this, (_ref2 = DialogInline.__proto__ || (0, _getPrototypeOf2.default)(DialogInline)).call.apply(_ref2, [this].concat(args))), _this2), _this2.handleClickOverlay = function () {\n      _this2.requestClose(false);\n    }, _this2.handleKeyUp = function (event) {\n      if ((0, _keycode2.default)(event) === 'esc') {\n        _this2.requestClose(false);\n      }\n    }, _this2.handleResize = function () {\n      _this2.positionDialog();\n    }, _temp2), (0, _possibleConstructorReturn3.default)(_this2, _ret2);\n  }\n\n  (0, _createClass3.default)(DialogInline, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.positionDialog();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.positionDialog();\n    }\n  }, {\n    key: 'positionDialog',\n    value: function positionDialog() {\n      var _props2 = this.props,\n          actions = _props2.actions,\n          autoDetectWindowHeight = _props2.autoDetectWindowHeight,\n          autoScrollBodyContent = _props2.autoScrollBodyContent,\n          bodyStyle = _props2.bodyStyle,\n          open = _props2.open,\n          repositionOnUpdate = _props2.repositionOnUpdate,\n          title = _props2.title;\n\n      if (!open) {\n        return;\n      }\n\n      var clientHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\n      var container = _reactDom2.default.findDOMNode(this);\n\n      var dialogWindow = _reactDom2.default.findDOMNode(this.refs.dialogWindow);\n\n      var dialogContent = _reactDom2.default.findDOMNode(this.refs.dialogContent);\n\n      var minPaddingTop = 16; // Reset the height in case the window was resized.\n\n      dialogWindow.style.height = '';\n      dialogContent.style.height = '';\n      var dialogWindowHeight = dialogWindow.offsetHeight;\n      var paddingTop = (clientHeight - dialogWindowHeight) / 2 - 64;\n      if (paddingTop < minPaddingTop) paddingTop = minPaddingTop; // Vertically center the dialog window, but make sure it doesn't\n      // transition to that position.\n\n      if (repositionOnUpdate || !container.style.paddingTop) {\n        container.style.paddingTop = paddingTop + 'px';\n      } // Force a height if the dialog is taller than clientHeight\n\n\n      if (autoDetectWindowHeight || autoScrollBodyContent) {\n        var styles = getStyles(this.props, this.context);\n        styles.body = (0, _simpleAssign2.default)(styles.body, bodyStyle);\n        var maxDialogContentHeight = clientHeight - 2 * 64;\n        if (title) maxDialogContentHeight -= dialogContent.previousSibling.offsetHeight;\n\n        if (_react2.default.Children.count(actions)) {\n          maxDialogContentHeight -= dialogContent.nextSibling.offsetHeight;\n        }\n\n        dialogContent.style.maxHeight = maxDialogContentHeight + 'px';\n\n        if (maxDialogContentHeight > dialogWindowHeight) {\n          dialogContent.style.borderBottom = 'none';\n          dialogContent.style.borderTop = 'none';\n        }\n      }\n    }\n  }, {\n    key: 'requestClose',\n    value: function requestClose(buttonClicked) {\n      if (!buttonClicked && this.props.modal) {\n        return;\n      }\n\n      if (this.props.onRequestClose) {\n        this.props.onRequestClose(!!buttonClicked);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props3 = this.props,\n          actions = _props3.actions,\n          actionsContainerClassName = _props3.actionsContainerClassName,\n          actionsContainerStyle = _props3.actionsContainerStyle,\n          bodyClassName = _props3.bodyClassName,\n          bodyStyle = _props3.bodyStyle,\n          children = _props3.children,\n          className = _props3.className,\n          contentClassName = _props3.contentClassName,\n          contentStyle = _props3.contentStyle,\n          overlayClassName = _props3.overlayClassName,\n          overlayStyle = _props3.overlayStyle,\n          open = _props3.open,\n          paperClassName = _props3.paperClassName,\n          paperProps = _props3.paperProps,\n          style = _props3.style,\n          titleClassName = _props3.titleClassName,\n          titleStyle = _props3.titleStyle,\n          title = _props3.title;\n      var prepareStyles = this.context.muiTheme.prepareStyles;\n      var styles = getStyles(this.props, this.context);\n      styles.root = (0, _simpleAssign2.default)(styles.root, style);\n      styles.content = (0, _simpleAssign2.default)(styles.content, contentStyle);\n      styles.body = (0, _simpleAssign2.default)(styles.body, bodyStyle);\n      styles.actionsContainer = (0, _simpleAssign2.default)(styles.actionsContainer, actionsContainerStyle);\n      styles.overlay = (0, _simpleAssign2.default)(styles.overlay, overlayStyle);\n      styles.title = (0, _simpleAssign2.default)(styles.title, titleStyle);\n\n      var actionsContainer = _react2.default.Children.count(actions) > 0 && _react2.default.createElement('div', {\n        className: actionsContainerClassName,\n        style: prepareStyles(styles.actionsContainer)\n      }, _react2.default.Children.toArray(actions));\n\n      var titleElement = title;\n\n      if (_react2.default.isValidElement(title)) {\n        titleElement = _react2.default.cloneElement(title, {\n          className: title.props.className || titleClassName,\n          style: prepareStyles((0, _simpleAssign2.default)(styles.title, title.props.style))\n        });\n      } else if (typeof title === 'string') {\n        titleElement = _react2.default.createElement('h3', {\n          className: titleClassName,\n          style: prepareStyles(styles.title)\n        }, title);\n      }\n\n      return _react2.default.createElement('div', {\n        className: className,\n        style: prepareStyles(styles.root)\n      }, open && _react2.default.createElement(_reactEventListener2.default, {\n        target: 'window',\n        onKeyUp: this.handleKeyUp,\n        onResize: this.handleResize\n      }), _react2.default.createElement(_TransitionGroup2.default, {\n        component: 'div',\n        ref: 'dialogWindow',\n        transitionAppear: true,\n        transitionAppearTimeout: 450,\n        transitionEnter: true,\n        transitionEnterTimeout: 450\n      }, open && _react2.default.createElement(TransitionItem, {\n        className: contentClassName,\n        style: styles.content\n      }, _react2.default.createElement(_Paper2.default, (0, _extends3.default)({\n        className: paperClassName,\n        zDepth: 4\n      }, paperProps), titleElement, _react2.default.createElement('div', {\n        ref: 'dialogContent',\n        className: bodyClassName,\n        style: prepareStyles(styles.body)\n      }, children), actionsContainer))), _react2.default.createElement(_Overlay2.default, {\n        show: open,\n        className: overlayClassName,\n        style: styles.overlay,\n        onClick: this.handleClickOverlay\n      }));\n    }\n  }]);\n  return DialogInline;\n}(_react.Component);\n\nDialogInline.contextTypes = {\n  muiTheme: _propTypes2.default.object.isRequired\n};\nDialogInline.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  actions: _propTypes2.default.node,\n  actionsContainerClassName: _propTypes2.default.string,\n  actionsContainerStyle: _propTypes2.default.object,\n  autoDetectWindowHeight: _propTypes2.default.bool,\n  autoScrollBodyContent: _propTypes2.default.bool,\n  bodyClassName: _propTypes2.default.string,\n  bodyStyle: _propTypes2.default.object,\n  children: _propTypes2.default.node,\n  className: _propTypes2.default.string,\n  contentClassName: _propTypes2.default.string,\n  contentStyle: _propTypes2.default.object,\n  modal: _propTypes2.default.bool,\n  onRequestClose: _propTypes2.default.func,\n  open: _propTypes2.default.bool.isRequired,\n  overlayClassName: _propTypes2.default.string,\n  overlayStyle: _propTypes2.default.object,\n  paperClassName: _propTypes2.default.string,\n  paperProps: _propTypes2.default.object,\n  repositionOnUpdate: _propTypes2.default.bool,\n  style: _propTypes2.default.object,\n  title: _propTypes2.default.node,\n  titleClassName: _propTypes2.default.string,\n  titleStyle: _propTypes2.default.object\n} : {};\n\nvar Dialog = function (_Component3) {\n  (0, _inherits3.default)(Dialog, _Component3);\n\n  function Dialog() {\n    var _ref3;\n\n    var _temp3, _this3, _ret3;\n\n    (0, _classCallCheck3.default)(this, Dialog);\n\n    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return _ret3 = (_temp3 = (_this3 = (0, _possibleConstructorReturn3.default)(this, (_ref3 = Dialog.__proto__ || (0, _getPrototypeOf2.default)(Dialog)).call.apply(_ref3, [this].concat(args))), _this3), _this3.renderLayer = function () {\n      return _react2.default.createElement(DialogInline, _this3.props);\n    }, _temp3), (0, _possibleConstructorReturn3.default)(_this3, _ret3);\n  }\n\n  (0, _createClass3.default)(Dialog, [{\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement(_RenderToLayer2.default, {\n        render: this.renderLayer,\n        open: true,\n        useLayerForClickAway: false\n      });\n    }\n  }]);\n  return Dialog;\n}(_react.Component);\n\nDialog.contextTypes = {\n  muiTheme: _propTypes2.default.object.isRequired\n};\nDialog.defaultProps = {\n  autoDetectWindowHeight: true,\n  autoScrollBodyContent: false,\n  modal: false,\n  repositionOnUpdate: true\n};\nDialog.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * Action buttons to display below the Dialog content (`children`).\n   * This property accepts either a React element, or an array of React elements.\n   */\n  actions: _propTypes2.default.node,\n\n  /**\n   * The `className` to add to the actions container's root element.\n   */\n  actionsContainerClassName: _propTypes2.default.string,\n\n  /**\n   * Overrides the inline-styles of the actions container's root element.\n   */\n  actionsContainerStyle: _propTypes2.default.object,\n\n  /**\n   * If set to true, the height of the `Dialog` will be auto detected. A max height\n   * will be enforced so that the content does not extend beyond the viewport.\n   */\n  autoDetectWindowHeight: _propTypes2.default.bool,\n\n  /**\n   * If set to true, the body content of the `Dialog` will be scrollable.\n   */\n  autoScrollBodyContent: _propTypes2.default.bool,\n\n  /**\n   * The `className` to add to the content's root element under the title.\n   */\n  bodyClassName: _propTypes2.default.string,\n\n  /**\n   * Overrides the inline-styles of the content's root element under the title.\n   */\n  bodyStyle: _propTypes2.default.object,\n\n  /**\n   * The contents of the `Dialog`.\n   */\n  children: _propTypes2.default.node,\n\n  /**\n   * @ignore\n   */\n  className: _propTypes2.default.string,\n\n  /**\n   * The `className` to add to the content container.\n   */\n  contentClassName: _propTypes2.default.string,\n\n  /**\n   * Overrides the inline-styles of the content container.\n   */\n  contentStyle: _propTypes2.default.object,\n\n  /**\n   * Force the user to use one of the actions in the `Dialog`.\n   * Clicking outside the `Dialog` will not trigger the `onRequestClose`.\n   */\n  modal: _propTypes2.default.bool,\n\n  /**\n   * Fired when the `Dialog` is requested to be closed by a click outside the `Dialog` or on the buttons.\n   *\n   * @param {bool} buttonClicked Determines whether a button click triggered this request.\n   */\n  onRequestClose: _propTypes2.default.func,\n\n  /**\n   * Controls whether the Dialog is opened or not.\n   */\n  open: _propTypes2.default.bool.isRequired,\n\n  /**\n   * The `className` to add to the `Overlay` component that is rendered behind the `Dialog`.\n   */\n  overlayClassName: _propTypes2.default.string,\n\n  /**\n   * Overrides the inline-styles of the `Overlay` component that is rendered behind the `Dialog`.\n   */\n  overlayStyle: _propTypes2.default.object,\n\n  /**\n   * The CSS class name of the `Paper` element.\n   */\n  paperClassName: _propTypes2.default.string,\n\n  /**\n   * Properties applied to the `Paper` element.\n   */\n  paperProps: _propTypes2.default.object,\n\n  /**\n   * Determines whether the `Dialog` should be repositioned when it's contents are updated.\n   */\n  repositionOnUpdate: _propTypes2.default.bool,\n\n  /**\n   * Override the inline-styles of the root element.\n   */\n  style: _propTypes2.default.object,\n\n  /**\n   * The title to display on the `Dialog`. Could be number, string, element or an array containing these types.\n   */\n  title: _propTypes2.default.node,\n\n  /**\n   * The `className` to add to the title's root container element.\n   */\n  titleClassName: _propTypes2.default.string,\n\n  /**\n   * Overrides the inline-styles of the title's root container element.\n   */\n  titleStyle: _propTypes2.default.object\n} : {};\nexports.default = Dialog;","map":null,"metadata":{},"sourceType":"script"}