{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime-corejs2/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime-corejs2/helpers/esm/inheritsLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Button from './Button';\nimport SafeAnchor from './SafeAnchor';\nimport { bsClass as setBsClass } from './utils/bootstrapUtils';\nvar propTypes = {\n  noCaret: PropTypes.bool,\n  open: PropTypes.bool,\n  title: PropTypes.string,\n  useAnchor: PropTypes.bool\n};\nvar defaultProps = {\n  open: false,\n  useAnchor: false,\n  bsRole: 'toggle'\n};\n\nvar DropdownToggle =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(DropdownToggle, _React$Component);\n\n  function DropdownToggle() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = DropdownToggle.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        noCaret = _this$props.noCaret,\n        open = _this$props.open,\n        useAnchor = _this$props.useAnchor,\n        bsClass = _this$props.bsClass,\n        className = _this$props.className,\n        children = _this$props.children,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"noCaret\", \"open\", \"useAnchor\", \"bsClass\", \"className\", \"children\"]);\n\n    delete props.bsRole;\n    var Component = useAnchor ? SafeAnchor : Button;\n    var useCaret = !noCaret; // This intentionally forwards bsSize and bsStyle (if set) to the\n    // underlying component, to allow it to render size and style variants.\n    // FIXME: Should this really fall back to `title` as children?\n\n    return React.createElement(Component, _extends({}, props, {\n      role: \"button\",\n      className: classNames(className, bsClass),\n      \"aria-haspopup\": true,\n      \"aria-expanded\": open\n    }), children || props.title, useCaret && ' ', useCaret && React.createElement(\"span\", {\n      className: \"caret\"\n    }));\n  };\n\n  return DropdownToggle;\n}(React.Component);\n\nDropdownToggle.propTypes = propTypes;\nDropdownToggle.defaultProps = defaultProps;\nexport default setBsClass('dropdown-toggle', DropdownToggle);","map":null,"metadata":{},"sourceType":"module"}