{"ast":null,"code":"import PropTypes from 'prop-types';\nimport createChainableTypeChecker from 'prop-types-extra/lib/utils/createChainableTypeChecker';\nimport ValidComponentChildren from './ValidComponentChildren';\nvar idPropType = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);\nexport function generatedId(name) {\n  return function (props) {\n    var error = null;\n\n    if (!props.generateChildId) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      error = idPropType.apply(void 0, [props].concat(args));\n\n      if (!error && !props.id) {\n        error = new Error(\"In order to properly initialize the \" + name + \" in a way that is accessible to assistive technologies \" + (\"(such as screen readers) an `id` or a `generateChildId` prop to \" + name + \" is required\"));\n      }\n    }\n\n    return error;\n  };\n}\nexport function requiredRoles() {\n  for (var _len2 = arguments.length, roles = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    roles[_key2] = arguments[_key2];\n  }\n\n  return createChainableTypeChecker(function (props, propName, component) {\n    var missing;\n    roles.every(function (role) {\n      if (!ValidComponentChildren.some(props.children, function (child) {\n        return child.props.bsRole === role;\n      })) {\n        missing = role;\n        return false;\n      }\n\n      return true;\n    });\n\n    if (missing) {\n      return new Error(\"(children) \" + component + \" - Missing a required child with bsRole: \" + (missing + \". \" + component + \" must have at least one child of each of \") + (\"the following bsRoles: \" + roles.join(', ')));\n    }\n\n    return null;\n  });\n}\nexport function exclusiveRoles() {\n  for (var _len3 = arguments.length, roles = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    roles[_key3] = arguments[_key3];\n  }\n\n  return createChainableTypeChecker(function (props, propName, component) {\n    var duplicate;\n    roles.every(function (role) {\n      var childrenWithRole = ValidComponentChildren.filter(props.children, function (child) {\n        return child.props.bsRole === role;\n      });\n\n      if (childrenWithRole.length > 1) {\n        duplicate = role;\n        return false;\n      }\n\n      return true;\n    });\n\n    if (duplicate) {\n      return new Error(\"(children) \" + component + \" - Duplicate children detected of bsRole: \" + (duplicate + \". Only one child each allowed with the following \") + (\"bsRoles: \" + roles.join(', ')));\n    }\n\n    return null;\n  });\n}","map":null,"metadata":{},"sourceType":"module"}