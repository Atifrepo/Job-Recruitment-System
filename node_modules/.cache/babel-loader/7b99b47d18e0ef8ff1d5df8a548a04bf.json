{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _simpleAssign = require('simple-assign');\n\nvar _simpleAssign2 = _interopRequireDefault(_simpleAssign);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getStyles(props, context, state) {\n  var tableRow = context.muiTheme.tableRow;\n  var cellBgColor = 'inherit';\n\n  if (props.hovered || state.hovered) {\n    cellBgColor = tableRow.hoverColor;\n  } else if (props.selected) {\n    cellBgColor = tableRow.selectedColor;\n  } else if (props.striped) {\n    cellBgColor = tableRow.stripeColor;\n  }\n\n  return {\n    root: {\n      borderBottom: props.displayBorder && '1px solid ' + tableRow.borderColor,\n      color: tableRow.textColor,\n      height: tableRow.height\n    },\n    cell: {\n      backgroundColor: cellBgColor\n    }\n  };\n}\n\nvar TableRow = function (_Component) {\n  (0, _inherits3.default)(TableRow, _Component);\n\n  function TableRow() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, TableRow);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TableRow.__proto__ || (0, _getPrototypeOf2.default)(TableRow)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      hovered: false\n    }, _this.onCellClick = function (event, columnIndex) {\n      if (_this.props.selectable && _this.props.onCellClick) {\n        _this.props.onCellClick(event, _this.props.rowNumber, columnIndex);\n      }\n\n      event.ctrlKey = true;\n\n      _this.onRowClick(event);\n    }, _this.onCellHover = function (event, columnIndex) {\n      if (_this.props.hoverable) {\n        _this.setState({\n          hovered: true\n        });\n\n        if (_this.props.onCellHover) _this.props.onCellHover(event, _this.props.rowNumber, columnIndex);\n\n        _this.onRowHover(event);\n      }\n    }, _this.onCellHoverExit = function (event, columnIndex) {\n      if (_this.props.hoverable) {\n        _this.setState({\n          hovered: false\n        });\n\n        if (_this.props.onCellHoverExit) _this.props.onCellHoverExit(event, _this.props.rowNumber, columnIndex);\n\n        _this.onRowHoverExit(event);\n      }\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  (0, _createClass3.default)(TableRow, [{\n    key: 'onRowClick',\n    value: function onRowClick(event) {\n      if (this.props.selectable && this.props.onRowClick) {\n        this.props.onRowClick(event, this.props.rowNumber);\n      }\n    }\n  }, {\n    key: 'onRowHover',\n    value: function onRowHover(event) {\n      if (this.props.onRowHover) {\n        this.props.onRowHover(event, this.props.rowNumber);\n      }\n    }\n  }, {\n    key: 'onRowHoverExit',\n    value: function onRowHoverExit(event) {\n      if (this.props.onRowHoverExit) {\n        this.props.onRowHoverExit(event, this.props.rowNumber);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          className = _props.className,\n          displayBorder = _props.displayBorder,\n          hoverable = _props.hoverable,\n          hovered = _props.hovered,\n          onCellClick = _props.onCellClick,\n          onCellHover = _props.onCellHover,\n          onCellHoverExit = _props.onCellHoverExit,\n          onRowClick = _props.onRowClick,\n          onRowHover = _props.onRowHover,\n          onRowHoverExit = _props.onRowHoverExit,\n          rowNumber = _props.rowNumber,\n          selectable = _props.selectable,\n          selected = _props.selected,\n          striped = _props.striped,\n          style = _props.style,\n          other = (0, _objectWithoutProperties3.default)(_props, ['className', 'displayBorder', 'hoverable', 'hovered', 'onCellClick', 'onCellHover', 'onCellHoverExit', 'onRowClick', 'onRowHover', 'onRowHoverExit', 'rowNumber', 'selectable', 'selected', 'striped', 'style']);\n      var prepareStyles = this.context.muiTheme.prepareStyles;\n      var styles = getStyles(this.props, this.context, this.state);\n\n      var rowColumns = _react2.default.Children.map(this.props.children, function (child, columnNumber) {\n        if (_react2.default.isValidElement(child)) {\n          return _react2.default.cloneElement(child, {\n            columnNumber: columnNumber,\n            hoverable: _this2.props.hoverable,\n            key: _this2.props.rowNumber + '-' + columnNumber,\n            onClick: _this2.onCellClick,\n            onHover: _this2.onCellHover,\n            onHoverExit: _this2.onCellHoverExit,\n            style: (0, _simpleAssign2.default)({}, styles.cell, child.props.style)\n          });\n        }\n      });\n\n      return _react2.default.createElement('tr', (0, _extends3.default)({\n        className: className,\n        style: prepareStyles((0, _simpleAssign2.default)(styles.root, style))\n      }, other), rowColumns);\n    }\n  }]);\n  return TableRow;\n}(_react.Component);\n\nTableRow.defaultProps = {\n  displayBorder: true,\n  hoverable: false,\n  hovered: false,\n  selectable: true,\n  striped: false\n};\nTableRow.contextTypes = {\n  muiTheme: _propTypes2.default.object.isRequired\n};\nTableRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * Children passed to table row.\n   */\n  children: _propTypes2.default.node,\n\n  /**\n   * The css class name of the root element.\n   */\n  className: _propTypes2.default.string,\n\n  /**\n   * If true, row border will be displayed for the row.\n   * If false, no border will be drawn.\n   */\n  displayBorder: _propTypes2.default.bool,\n\n  /**\n   * Controls whether or not the row responds to hover events.\n   */\n  hoverable: _propTypes2.default.bool,\n\n  /**\n   * Controls whether or not the row should be rendered as being\n   * hovered. This property is evaluated in addition to this.state.hovered\n   * and can be used to synchronize the hovered state with some other\n   * external events.\n   */\n  hovered: _propTypes2.default.bool,\n\n  /**\n   * @ignore\n   * Called when a row cell is clicked.\n   * rowNumber is the row number and columnId is\n   * the column number or the column key.\n   */\n  onCellClick: _propTypes2.default.func,\n\n  /**\n   * @ignore\n   * Called when a table cell is hovered.\n   * rowNumber is the row number of the hovered row\n   * and columnId is the column number or the column key of the cell.\n   */\n  onCellHover: _propTypes2.default.func,\n\n  /**\n   * @ignore\n   * Called when a table cell is no longer hovered.\n   * rowNumber is the row number of the row and columnId\n   * is the column number or the column key of the cell.\n   */\n  onCellHoverExit: _propTypes2.default.func,\n\n  /**\n   * @ignore\n   * Called when row is clicked.\n   */\n  onRowClick: _propTypes2.default.func,\n\n  /**\n   * @ignore\n   * Called when a table row is hovered.\n   * rowNumber is the row number of the hovered row.\n   */\n  onRowHover: _propTypes2.default.func,\n\n  /**\n   * @ignore\n   * Called when a table row is no longer hovered.\n   * rowNumber is the row number of the row that is no longer hovered.\n   */\n  onRowHoverExit: _propTypes2.default.func,\n\n  /**\n   * Number to identify the row. This property is\n   * automatically populated when used with the TableBody component.\n   */\n  rowNumber: _propTypes2.default.number,\n\n  /**\n   * If true, table rows can be selected. If multiple row\n   * selection is desired, enable multiSelectable.\n   * The default value is true.\n   */\n  selectable: _propTypes2.default.bool,\n\n  /**\n   * Indicates that a particular row is selected.\n   * This property can be used to programmatically select rows.\n   */\n  selected: _propTypes2.default.bool,\n\n  /**\n   * Indicates whether or not the row is striped.\n   */\n  striped: _propTypes2.default.bool,\n\n  /**\n   * Override the inline-styles of the root element.\n   */\n  style: _propTypes2.default.object\n} : {};\nexports.default = TableRow;","map":null,"metadata":{},"sourceType":"script"}