{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime-corejs2/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime-corejs2/helpers/esm/inheritsLoose\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport SafeAnchor from './SafeAnchor';\nimport createChainedFunction from './utils/createChainedFunction';\nvar propTypes = {\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  role: PropTypes.string,\n  href: PropTypes.string,\n  onClick: PropTypes.func,\n  onSelect: PropTypes.func,\n  eventKey: PropTypes.any\n};\nvar defaultProps = {\n  active: false,\n  disabled: false\n};\n\nvar NavItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(NavItem, _React$Component);\n\n  function NavItem(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  var _proto = NavItem.prototype;\n\n  _proto.handleClick = function handleClick(e) {\n    if (this.props.disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (this.props.onSelect) {\n      this.props.onSelect(this.props.eventKey, e);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        active = _this$props.active,\n        disabled = _this$props.disabled,\n        onClick = _this$props.onClick,\n        className = _this$props.className,\n        style = _this$props.style,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"active\", \"disabled\", \"onClick\", \"className\", \"style\"]);\n\n    delete props.onSelect;\n    delete props.eventKey; // These are injected down by `<Nav>` for building `<SubNav>`s.\n\n    delete props.activeKey;\n    delete props.activeHref;\n\n    if (!props.role) {\n      if (props.href === '#') {\n        props.role = 'button';\n      }\n    } else if (props.role === 'tab') {\n      props['aria-selected'] = active;\n    }\n\n    return React.createElement(\"li\", {\n      role: \"presentation\",\n      className: classNames(className, {\n        active: active,\n        disabled: disabled\n      }),\n      style: style\n    }, React.createElement(SafeAnchor, _extends({}, props, {\n      disabled: disabled,\n      onClick: createChainedFunction(onClick, this.handleClick)\n    })));\n  };\n\n  return NavItem;\n}(React.Component);\n\nNavItem.propTypes = propTypes;\nNavItem.defaultProps = defaultProps;\nexport default NavItem;","map":null,"metadata":{},"sourceType":"module"}