{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _simpleAssign = require('simple-assign');\n\nvar _simpleAssign2 = _interopRequireDefault(_simpleAssign);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _TimePickerDialog = require('./TimePickerDialog');\n\nvar _TimePickerDialog2 = _interopRequireDefault(_TimePickerDialog);\n\nvar _TextField = require('../TextField');\n\nvar _TextField2 = _interopRequireDefault(_TextField);\n\nvar _timeUtils = require('./timeUtils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar emptyTime = new Date();\nemptyTime.setHours(0);\nemptyTime.setMinutes(0);\nemptyTime.setSeconds(0);\nemptyTime.setMilliseconds(0);\n\nvar TimePicker = function (_Component) {\n  (0, _inherits3.default)(TimePicker, _Component);\n\n  function TimePicker() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, TimePicker);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TimePicker.__proto__ || (0, _getPrototypeOf2.default)(TimePicker)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      time: null,\n      dialogTime: new Date()\n    }, _this.handleAcceptDialog = function (time) {\n      _this.setState({\n        time: time\n      });\n\n      if (_this.props.onChange) _this.props.onChange(null, time);\n    }, _this.handleFocusInput = function (event) {\n      event.target.blur();\n\n      if (_this.props.onFocus) {\n        _this.props.onFocus(event);\n      }\n    }, _this.handleClickInput = function (event) {\n      event.preventDefault();\n\n      if (!_this.props.disabled) {\n        _this.openDialog();\n      }\n\n      if (_this.props.onClick) {\n        _this.props.onClick(event);\n      }\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  (0, _createClass3.default)(TimePicker, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.setState({\n        time: this.isControlled() ? this.getControlledTime() : this.props.defaultTime\n      });\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.value !== this.props.value) {\n        this.setState({\n          time: this.getControlledTime(nextProps)\n        });\n      }\n    }\n    /**\n     * Alias for `openDialog()` for an api consistent with TextField.\n     */\n\n  }, {\n    key: 'focus',\n    value: function focus() {\n      this.openDialog();\n    }\n  }, {\n    key: 'openDialog',\n    value: function openDialog() {\n      this.setState({\n        dialogTime: this.state.time\n      });\n      this.refs.dialogWindow.show();\n    }\n  }, {\n    key: 'isControlled',\n    value: function isControlled() {\n      return this.props.value !== null;\n    }\n  }, {\n    key: 'getControlledTime',\n    value: function getControlledTime() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var result = null;\n\n      if (props.value instanceof Date) {\n        result = props.value;\n      }\n\n      return result;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          autoOk = _props.autoOk,\n          cancelLabel = _props.cancelLabel,\n          defaultTime = _props.defaultTime,\n          dialogBodyStyle = _props.dialogBodyStyle,\n          dialogStyle = _props.dialogStyle,\n          format = _props.format,\n          okLabel = _props.okLabel,\n          onFocus = _props.onFocus,\n          onClick = _props.onClick,\n          onShow = _props.onShow,\n          onDismiss = _props.onDismiss,\n          pedantic = _props.pedantic,\n          style = _props.style,\n          textFieldStyle = _props.textFieldStyle,\n          minutesStep = _props.minutesStep,\n          other = (0, _objectWithoutProperties3.default)(_props, ['autoOk', 'cancelLabel', 'defaultTime', 'dialogBodyStyle', 'dialogStyle', 'format', 'okLabel', 'onFocus', 'onClick', 'onShow', 'onDismiss', 'pedantic', 'style', 'textFieldStyle', 'minutesStep']);\n      var prepareStyles = this.context.muiTheme.prepareStyles;\n      var time = this.state.time;\n      return _react2.default.createElement('div', {\n        style: prepareStyles((0, _simpleAssign2.default)({}, style))\n      }, _react2.default.createElement(_TextField2.default, (0, _extends3.default)({}, other, {\n        style: textFieldStyle,\n        ref: 'input',\n        value: time === emptyTime ? null : (0, _timeUtils.formatTime)(time, format, pedantic),\n        onFocus: this.handleFocusInput,\n        onClick: this.handleClickInput\n      })), _react2.default.createElement(_TimePickerDialog2.default, {\n        ref: 'dialogWindow',\n        bodyStyle: dialogBodyStyle,\n        initialTime: this.state.dialogTime,\n        onAccept: this.handleAcceptDialog,\n        onShow: onShow,\n        onDismiss: onDismiss,\n        format: format,\n        okLabel: okLabel,\n        cancelLabel: cancelLabel,\n        autoOk: autoOk,\n        style: dialogStyle,\n        minutesStep: minutesStep\n      }));\n    }\n  }]);\n  return TimePicker;\n}(_react.Component);\n\nTimePicker.defaultProps = {\n  autoOk: false,\n  cancelLabel: 'Cancel',\n  defaultTime: null,\n  disabled: false,\n  format: 'ampm',\n  okLabel: 'OK',\n  pedantic: false,\n  style: {},\n  value: null,\n  minutesStep: 1\n};\nTimePicker.contextTypes = {\n  muiTheme: _propTypes2.default.object.isRequired\n};\nTimePicker.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * If true, automatically accept and close the picker on set minutes.\n   */\n  autoOk: _propTypes2.default.bool,\n\n  /**\n   * Override the label of the 'Cancel' button.\n   */\n  cancelLabel: _propTypes2.default.node,\n\n  /**\n   * The initial time value of the TimePicker.\n   */\n  defaultTime: _propTypes2.default.object,\n\n  /**\n   * Override the inline-styles of TimePickerDialog's body element.\n   */\n  dialogBodyStyle: _propTypes2.default.object,\n\n  /**\n   * Override the inline-styles of TimePickerDialog's root element.\n   */\n  dialogStyle: _propTypes2.default.object,\n\n  /**\n   * If true, the TimePicker is disabled.\n   */\n  disabled: _propTypes2.default.bool,\n\n  /**\n   * Tells the component to display the picker in `ampm` (12hr) format or `24hr` format.\n   */\n  format: _propTypes2.default.oneOf(['ampm', '24hr']),\n\n  /**\n   * How many minutes should be added/subtracted when moving the clock pointer.\n   */\n  minutesStep: _propTypes2.default.number,\n\n  /**\n   * Override the label of the 'OK' button.\n   */\n  okLabel: _propTypes2.default.node,\n\n  /**\n   * Callback function that is fired when the time value changes. The time value is passed in a Date Object.\n   * Since there is no particular event associated with the change the first argument will always be null\n   * and the second argument will be the new Date instance.\n   */\n  onChange: _propTypes2.default.func,\n\n  /**\n   * Callback function fired when the TimePicker is tapped or clicked.\n   */\n  onClick: _propTypes2.default.func,\n\n  /**\n   * Callback function fired when the TimePicker dialog is dismissed.\n   */\n  onDismiss: _propTypes2.default.func,\n\n  /**\n   * Callback function fired when the TimePicker `TextField` gains focus.\n   */\n  onFocus: _propTypes2.default.func,\n\n  /**\n   * Callback function fired when the TimePicker dialog is shown.\n   */\n  onShow: _propTypes2.default.func,\n\n  /**\n   * If true, uses (\"noon\" / \"midnight\") instead of (\"12 a.m.\" / \"12 p.m.\").\n   *\n   * It's technically more correct to refer to \"12 noon\" and \"12 midnight\" rather than \"12 a.m.\" and \"12 p.m.\"\n   * and it avoids confusion between different locales. By default (for compatibility reasons) TimePicker uses\n   * (\"12 a.m.\" / \"12 p.m.\").\n   */\n  pedantic: _propTypes2.default.bool,\n\n  /**\n   * Override the inline-styles of the root element.\n   */\n  style: _propTypes2.default.object,\n\n  /**\n   * Override the inline-styles of TimePicker's TextField element.\n   */\n  textFieldStyle: _propTypes2.default.object,\n\n  /**\n   * Sets the time for the Time Picker programmatically.\n   */\n  value: _propTypes2.default.object\n} : {};\nexports.default = TimePicker;","map":null,"metadata":{},"sourceType":"script"}