{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _simpleAssign = require('simple-assign');\n\nvar _simpleAssign2 = _interopRequireDefault(_simpleAssign);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _reactEventListener = require('react-event-listener');\n\nvar _reactEventListener2 = _interopRequireDefault(_reactEventListener);\n\nvar _RenderToLayer = require('../internal/RenderToLayer');\n\nvar _RenderToLayer2 = _interopRequireDefault(_RenderToLayer);\n\nvar _propTypes3 = require('../utils/propTypes');\n\nvar _propTypes4 = _interopRequireDefault(_propTypes3);\n\nvar _Paper = require('../Paper');\n\nvar _Paper2 = _interopRequireDefault(_Paper);\n\nvar _lodash = require('lodash.throttle');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _PopoverAnimationDefault = require('./PopoverAnimationDefault');\n\nvar _PopoverAnimationDefault2 = _interopRequireDefault(_PopoverAnimationDefault);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar styles = {\n  root: {\n    display: 'none'\n  }\n};\n\nvar Popover = function (_Component) {\n  (0, _inherits3.default)(Popover, _Component);\n\n  function Popover(props, context) {\n    (0, _classCallCheck3.default)(this, Popover);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Popover.__proto__ || (0, _getPrototypeOf2.default)(Popover)).call(this, props, context));\n\n    _this.timeout = null;\n\n    _this.renderLayer = function () {\n      var _this$props = _this.props,\n          animated = _this$props.animated,\n          animation = _this$props.animation,\n          anchorEl = _this$props.anchorEl,\n          anchorOrigin = _this$props.anchorOrigin,\n          autoCloseWhenOffScreen = _this$props.autoCloseWhenOffScreen,\n          canAutoPosition = _this$props.canAutoPosition,\n          children = _this$props.children,\n          onRequestClose = _this$props.onRequestClose,\n          style = _this$props.style,\n          targetOrigin = _this$props.targetOrigin,\n          useLayerForClickAway = _this$props.useLayerForClickAway,\n          scrollableContainer = _this$props.scrollableContainer,\n          other = (0, _objectWithoutProperties3.default)(_this$props, ['animated', 'animation', 'anchorEl', 'anchorOrigin', 'autoCloseWhenOffScreen', 'canAutoPosition', 'children', 'onRequestClose', 'style', 'targetOrigin', 'useLayerForClickAway', 'scrollableContainer']);\n      var styleRoot = style;\n\n      if (!animated) {\n        styleRoot = {\n          position: 'fixed',\n          zIndex: _this.context.muiTheme.zIndex.popover\n        };\n\n        if (!_this.state.open) {\n          return null;\n        }\n\n        return _react2.default.createElement(_Paper2.default, (0, _extends3.default)({\n          style: (0, _simpleAssign2.default)(styleRoot, style)\n        }, other), children);\n      }\n\n      var Animation = animation || _PopoverAnimationDefault2.default;\n      return _react2.default.createElement(Animation, (0, _extends3.default)({\n        targetOrigin: targetOrigin,\n        style: styleRoot\n      }, other, {\n        open: _this.state.open && !_this.state.closing\n      }), children);\n    };\n\n    _this.componentClickAway = function () {\n      _this.requestClose('clickAway');\n    };\n\n    _this.setPlacement = function (scrolling) {\n      if (!_this.state.open) {\n        return;\n      }\n\n      if (!_this.popoverRefs.layer.getLayer()) {\n        return;\n      }\n\n      var targetEl = _this.popoverRefs.layer.getLayer().children[0];\n\n      if (!targetEl) {\n        return;\n      }\n\n      var _this$props2 = _this.props,\n          targetOrigin = _this$props2.targetOrigin,\n          anchorOrigin = _this$props2.anchorOrigin;\n      var anchorEl = _this.props.anchorEl || _this.anchorEl;\n\n      var anchor = _this.getAnchorPosition(anchorEl);\n\n      var target = _this.getTargetPosition(targetEl);\n\n      var targetPosition = {\n        top: anchor[anchorOrigin.vertical] - target[targetOrigin.vertical],\n        left: anchor[anchorOrigin.horizontal] - target[targetOrigin.horizontal]\n      };\n\n      if (scrolling && _this.props.autoCloseWhenOffScreen) {\n        _this.autoCloseWhenOffScreen(anchor);\n      }\n\n      if (_this.props.canAutoPosition) {\n        target = _this.getTargetPosition(targetEl); // update as height may have changed\n\n        targetPosition = _this.applyAutoPositionIfNeeded(anchor, target, targetOrigin, anchorOrigin, targetPosition);\n      }\n\n      targetEl.style.top = targetPosition.top + 'px';\n      targetEl.style.left = targetPosition.left + 'px';\n      targetEl.style.maxHeight = window.innerHeight + 'px';\n    };\n\n    _this.handleResize = (0, _lodash2.default)(_this.setPlacement, 100);\n    _this.handleScroll = (0, _lodash2.default)(_this.setPlacement.bind(_this, true), 50);\n    _this.popoverRefs = {};\n    _this.state = {\n      open: props.open,\n      closing: false\n    };\n    return _this;\n  }\n\n  (0, _createClass3.default)(Popover, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.placementTimeout = setTimeout(this.setPlacement);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      if (nextProps.open === this.props.open) {\n        return;\n      }\n\n      if (nextProps.open) {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n        this.anchorEl = nextProps.anchorEl || this.props.anchorEl;\n        this.setState({\n          open: true,\n          closing: false\n        });\n      } else {\n        if (nextProps.animated) {\n          if (this.timeout !== null) return;\n          this.setState({\n            closing: true\n          });\n          this.timeout = setTimeout(function () {\n            _this2.setState({\n              open: false\n            }, function () {\n              _this2.timeout = null;\n            });\n          }, 500);\n        } else {\n          this.setState({\n            open: false\n          });\n        }\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      clearTimeout(this.placementTimeout);\n      this.placementTimeout = setTimeout(this.setPlacement);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.handleResize.cancel();\n      this.handleScroll.cancel();\n\n      if (this.placementTimeout) {\n        clearTimeout(this.placementTimeout);\n        this.placementTimeout = null;\n      }\n\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n      }\n    }\n  }, {\n    key: 'requestClose',\n    value: function requestClose(reason) {\n      if (this.props.onRequestClose) {\n        this.props.onRequestClose(reason);\n      }\n    }\n  }, {\n    key: 'getAnchorPosition',\n    value: function getAnchorPosition(el) {\n      if (!el) {\n        el = _reactDom2.default.findDOMNode(this);\n      }\n\n      var rect = el.getBoundingClientRect();\n      var a = {\n        top: rect.top,\n        left: rect.left,\n        width: el.offsetWidth,\n        height: el.offsetHeight\n      };\n      a.right = rect.right || a.left + a.width;\n      a.bottom = rect.bottom || a.top + a.height;\n      a.middle = a.left + (a.right - a.left) / 2;\n      a.center = a.top + (a.bottom - a.top) / 2;\n      return a;\n    }\n  }, {\n    key: 'getTargetPosition',\n    value: function getTargetPosition(targetEl) {\n      return {\n        top: 0,\n        center: targetEl.offsetHeight / 2,\n        bottom: targetEl.offsetHeight,\n        left: 0,\n        middle: targetEl.offsetWidth / 2,\n        right: targetEl.offsetWidth\n      };\n    }\n  }, {\n    key: 'autoCloseWhenOffScreen',\n    value: function autoCloseWhenOffScreen(anchorPosition) {\n      if (anchorPosition.top < 0 || anchorPosition.top > window.innerHeight || anchorPosition.left < 0 || anchorPosition.left > window.innerWidth) {\n        this.requestClose('offScreen');\n      }\n    }\n  }, {\n    key: 'getOverlapMode',\n    value: function getOverlapMode(anchor, target, median) {\n      if ([anchor, target].indexOf(median) >= 0) return 'auto';\n      if (anchor === target) return 'inclusive';\n      return 'exclusive';\n    }\n  }, {\n    key: 'getPositions',\n    value: function getPositions(anchor, target) {\n      var a = (0, _extends3.default)({}, anchor);\n      var t = (0, _extends3.default)({}, target);\n      var positions = {\n        x: ['left', 'right'].filter(function (p) {\n          return p !== t.horizontal;\n        }),\n        y: ['top', 'bottom'].filter(function (p) {\n          return p !== t.vertical;\n        })\n      };\n      var overlap = {\n        x: this.getOverlapMode(a.horizontal, t.horizontal, 'middle'),\n        y: this.getOverlapMode(a.vertical, t.vertical, 'center')\n      };\n      positions.x.splice(overlap.x === 'auto' ? 0 : 1, 0, 'middle');\n      positions.y.splice(overlap.y === 'auto' ? 0 : 1, 0, 'center');\n\n      if (overlap.y !== 'auto') {\n        a.vertical = a.vertical === 'top' ? 'bottom' : 'top';\n\n        if (overlap.y === 'inclusive') {\n          t.vertical = t.vertical;\n        }\n      }\n\n      if (overlap.x !== 'auto') {\n        a.horizontal = a.horizontal === 'left' ? 'right' : 'left';\n\n        if (overlap.y === 'inclusive') {\n          t.horizontal = t.horizontal;\n        }\n      }\n\n      return {\n        positions: positions,\n        anchorPos: a\n      };\n    }\n  }, {\n    key: 'applyAutoPositionIfNeeded',\n    value: function applyAutoPositionIfNeeded(anchor, target, targetOrigin, anchorOrigin, targetPosition) {\n      var _getPositions = this.getPositions(anchorOrigin, targetOrigin),\n          positions = _getPositions.positions,\n          anchorPos = _getPositions.anchorPos;\n\n      if (targetPosition.top < 0 || targetPosition.top + target.bottom > window.innerHeight) {\n        var newTop = anchor[anchorPos.vertical] - target[positions.y[0]];\n\n        if (newTop + target.bottom <= window.innerHeight) {\n          targetPosition.top = Math.max(0, newTop);\n        } else {\n          newTop = anchor[anchorPos.vertical] - target[positions.y[1]];\n\n          if (newTop + target.bottom <= window.innerHeight) {\n            targetPosition.top = Math.max(0, newTop);\n          }\n        }\n      }\n\n      if (targetPosition.left < 0 || targetPosition.left + target.right > window.innerWidth) {\n        var newLeft = anchor[anchorPos.horizontal] - target[positions.x[0]];\n\n        if (newLeft + target.right <= window.innerWidth) {\n          targetPosition.left = Math.max(0, newLeft);\n        } else {\n          newLeft = anchor[anchorPos.horizontal] - target[positions.x[1]];\n\n          if (newLeft + target.right <= window.innerWidth) {\n            targetPosition.left = Math.max(0, newLeft);\n          }\n        }\n      }\n\n      return targetPosition;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var eventListener = this.state.open ? _react2.default.createElement(_reactEventListener2.default, {\n        target: this.props.scrollableContainer,\n        onScroll: this.handleScroll,\n        onResize: this.handleResize\n      }) : null;\n      return _react2.default.createElement('div', {\n        style: styles.root\n      }, eventListener, _react2.default.createElement(_RenderToLayer2.default, {\n        ref: function ref(_ref) {\n          return _this3.popoverRefs.layer = _ref;\n        },\n        open: this.state.open,\n        componentClickAway: this.componentClickAway,\n        useLayerForClickAway: this.props.useLayerForClickAway,\n        render: this.renderLayer\n      }));\n    }\n  }]);\n  return Popover;\n}(_react.Component);\n\nPopover.defaultProps = {\n  anchorOrigin: {\n    vertical: 'bottom',\n    horizontal: 'left'\n  },\n  animated: true,\n  autoCloseWhenOffScreen: true,\n  canAutoPosition: true,\n  onRequestClose: function onRequestClose() {},\n  open: false,\n  scrollableContainer: 'window',\n  style: {\n    overflowY: 'auto'\n  },\n  targetOrigin: {\n    vertical: 'top',\n    horizontal: 'left'\n  },\n  useLayerForClickAway: true,\n  zDepth: 1\n};\nPopover.contextTypes = {\n  muiTheme: _propTypes2.default.object.isRequired\n};\nPopover.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * This is the DOM element that will be used to set the position of the\n   * popover.\n   */\n  anchorEl: _propTypes2.default.object,\n\n  /**\n   * This is the point on the anchor where the popover's\n   * `targetOrigin` will attach to.\n   * Options:\n   * vertical: [top, center, bottom]\n   * horizontal: [left, middle, right].\n   */\n  anchorOrigin: _propTypes4.default.origin,\n\n  /**\n   * If true, the popover will apply transitions when\n   * it is added to the DOM.\n   */\n  animated: _propTypes2.default.bool,\n\n  /**\n   * Override the default animation component used.\n   */\n  animation: _propTypes2.default.func,\n\n  /**\n   * If true, the popover will hide when the anchor is scrolled off the screen.\n   */\n  autoCloseWhenOffScreen: _propTypes2.default.bool,\n\n  /**\n   * If true, the popover (potentially) ignores `targetOrigin`\n   * and `anchorOrigin` to make itself fit on screen,\n   * which is useful for mobile devices.\n   */\n  canAutoPosition: _propTypes2.default.bool,\n\n  /**\n   * The content of the popover.\n   */\n  children: _propTypes2.default.node,\n\n  /**\n   * The CSS class name of the root element.\n   */\n  className: _propTypes2.default.string,\n\n  /**\n   * Callback function fired when the popover is requested to be closed.\n   *\n   * @param {string} reason The reason for the close request. Possibles values\n   * are 'clickAway' and 'offScreen'.\n   */\n  onRequestClose: _propTypes2.default.func,\n\n  /**\n   * If true, the popover is visible.\n   */\n  open: _propTypes2.default.bool,\n\n  /**\n   * Represents the parent scrollable container.\n   * It can be an element or a string like `window`.\n   */\n  scrollableContainer: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]),\n\n  /**\n   * Override the inline-styles of the root element.\n   */\n  style: _propTypes2.default.object,\n\n  /**\n   * This is the point on the popover which will attach to\n   * the anchor's origin.\n   * Options:\n   * vertical: [top, center, bottom]\n   * horizontal: [left, middle, right].\n   */\n  targetOrigin: _propTypes4.default.origin,\n\n  /**\n   * If true, the popover will render on top of an invisible\n   * layer, which will prevent clicks to the underlying\n   * elements, and trigger an `onRequestClose('clickAway')` call.\n   */\n  useLayerForClickAway: _propTypes2.default.bool,\n\n  /**\n   * The zDepth of the popover.\n   */\n  zDepth: _propTypes4.default.zDepth\n} : {};\nexports.default = Popover;","map":null,"metadata":{},"sourceType":"script"}