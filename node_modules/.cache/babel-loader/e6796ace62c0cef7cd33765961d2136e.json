{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _simpleAssign = require('simple-assign');\n\nvar _simpleAssign2 = _interopRequireDefault(_simpleAssign);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _transitions = require('../styles/transitions');\n\nvar _transitions2 = _interopRequireDefault(_transitions);\n\nvar _colorManipulator = require('../utils/colorManipulator');\n\nvar _EnhancedButton = require('../internal/EnhancedButton');\n\nvar _EnhancedButton2 = _interopRequireDefault(_EnhancedButton);\n\nvar _Paper = require('../Paper');\n\nvar _Paper2 = _interopRequireDefault(_Paper);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction validateLabel(props, propName, componentName) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!props.children && props.label !== 0 && !props.label && !props.icon) {\n      return new Error('Required prop label or children or icon was not specified in ' + componentName + '.');\n    }\n  }\n}\n\nfunction getStyles(props, context, state) {\n  var _context$muiTheme = context.muiTheme,\n      baseTheme = _context$muiTheme.baseTheme,\n      button = _context$muiTheme.button,\n      raisedButton = _context$muiTheme.raisedButton,\n      borderRadius = _context$muiTheme.borderRadius;\n  var disabled = props.disabled,\n      disabledBackgroundColor = props.disabledBackgroundColor,\n      disabledLabelColor = props.disabledLabelColor,\n      fullWidth = props.fullWidth,\n      icon = props.icon,\n      label = props.label,\n      labelPosition = props.labelPosition,\n      primary = props.primary,\n      secondary = props.secondary,\n      style = props.style;\n  var amount = primary || secondary ? 0.4 : 0.08;\n  var backgroundColor = raisedButton.color;\n  var labelColor = raisedButton.textColor;\n\n  if (disabled) {\n    backgroundColor = disabledBackgroundColor || raisedButton.disabledColor;\n    labelColor = disabledLabelColor || raisedButton.disabledTextColor;\n  } else if (primary) {\n    backgroundColor = raisedButton.primaryColor;\n    labelColor = raisedButton.primaryTextColor;\n  } else if (secondary) {\n    backgroundColor = raisedButton.secondaryColor;\n    labelColor = raisedButton.secondaryTextColor;\n  } else {\n    if (props.backgroundColor) {\n      backgroundColor = props.backgroundColor;\n    }\n\n    if (props.labelColor) {\n      labelColor = props.labelColor;\n    }\n  }\n\n  var buttonHeight = style && style.height || button.height;\n  return {\n    root: {\n      display: 'inline-block',\n      transition: _transitions2.default.easeOut(),\n      minWidth: fullWidth ? '100%' : button.minWidth\n    },\n    button: {\n      height: buttonHeight,\n      lineHeight: buttonHeight + 'px',\n      width: '100%',\n      padding: 0,\n      borderRadius: borderRadius,\n      transition: _transitions2.default.easeOut(),\n      backgroundColor: backgroundColor,\n      // That's the default value for a button but not a link\n      textAlign: 'center'\n    },\n    label: {\n      position: 'relative',\n      opacity: 1,\n      fontSize: raisedButton.fontSize,\n      letterSpacing: 0,\n      textTransform: raisedButton.textTransform || button.textTransform || 'uppercase',\n      fontWeight: raisedButton.fontWeight,\n      margin: 0,\n      userSelect: 'none',\n      paddingLeft: icon && labelPosition !== 'before' ? 8 : baseTheme.spacing.desktopGutterLess,\n      paddingRight: icon && labelPosition === 'before' ? 8 : baseTheme.spacing.desktopGutterLess,\n      color: labelColor\n    },\n    icon: {\n      verticalAlign: 'middle',\n      marginLeft: label && labelPosition !== 'before' ? 12 : 0,\n      marginRight: label && labelPosition === 'before' ? 12 : 0\n    },\n    overlay: {\n      height: buttonHeight,\n      borderRadius: borderRadius,\n      backgroundColor: (state.keyboardFocused || state.hovered) && !disabled && (0, _colorManipulator.fade)(labelColor, amount),\n      transition: _transitions2.default.easeOut(),\n      top: 0\n    },\n    ripple: {\n      color: labelColor,\n      opacity: !(primary || secondary) ? 0.1 : 0.16\n    }\n  };\n}\n\nvar RaisedButton = function (_Component) {\n  (0, _inherits3.default)(RaisedButton, _Component);\n\n  function RaisedButton() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, RaisedButton);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      hovered: false,\n      keyboardFocused: false,\n      touched: false,\n      initialZDepth: 0,\n      zDepth: 0\n    }, _this.handleMouseDown = function (event) {\n      // only listen to left clicks\n      if (event.button === 0) {\n        _this.setState({\n          zDepth: _this.state.initialZDepth + 1\n        });\n      }\n\n      if (_this.props.onMouseDown) {\n        _this.props.onMouseDown(event);\n      }\n    }, _this.handleMouseUp = function (event) {\n      _this.setState({\n        zDepth: _this.state.initialZDepth\n      });\n\n      if (_this.props.onMouseUp) {\n        _this.props.onMouseUp(event);\n      }\n    }, _this.handleMouseLeave = function (event) {\n      if (!_this.state.keyboardFocused) {\n        _this.setState({\n          zDepth: _this.state.initialZDepth,\n          hovered: false\n        });\n      }\n\n      if (_this.props.onMouseLeave) {\n        _this.props.onMouseLeave(event);\n      }\n    }, _this.handleMouseEnter = function (event) {\n      if (!_this.state.keyboardFocused && !_this.state.touched) {\n        _this.setState({\n          hovered: true\n        });\n      }\n\n      if (_this.props.onMouseEnter) {\n        _this.props.onMouseEnter(event);\n      }\n    }, _this.handleTouchStart = function (event) {\n      _this.setState({\n        touched: true,\n        zDepth: _this.state.initialZDepth + 1\n      });\n\n      if (_this.props.onTouchStart) {\n        _this.props.onTouchStart(event);\n      }\n    }, _this.handleTouchEnd = function (event) {\n      _this.setState({\n        touched: true,\n        zDepth: _this.state.initialZDepth\n      });\n\n      if (_this.props.onTouchEnd) {\n        _this.props.onTouchEnd(event);\n      }\n    }, _this.handleKeyboardFocus = function (event, keyboardFocused) {\n      var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;\n\n      _this.setState({\n        zDepth: zDepth,\n        keyboardFocused: keyboardFocused\n      });\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  (0, _createClass3.default)(RaisedButton, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      var zDepth = this.props.disabled ? 0 : 1;\n      this.setState({\n        zDepth: zDepth,\n        initialZDepth: zDepth\n      });\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var zDepth = nextProps.disabled ? 0 : 1;\n      var nextState = {\n        zDepth: zDepth,\n        initialZDepth: zDepth\n      };\n\n      if (nextProps.disabled) {\n        nextState.hovered = false;\n      }\n\n      this.setState(nextState);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          backgroundColor = _props.backgroundColor,\n          buttonStyle = _props.buttonStyle,\n          children = _props.children,\n          className = _props.className,\n          disabled = _props.disabled,\n          disabledBackgroundColor = _props.disabledBackgroundColor,\n          disabledLabelColor = _props.disabledLabelColor,\n          fullWidth = _props.fullWidth,\n          icon = _props.icon,\n          label = _props.label,\n          labelColor = _props.labelColor,\n          labelPosition = _props.labelPosition,\n          labelStyle = _props.labelStyle,\n          overlayStyle = _props.overlayStyle,\n          primary = _props.primary,\n          rippleStyle = _props.rippleStyle,\n          secondary = _props.secondary,\n          style = _props.style,\n          other = (0, _objectWithoutProperties3.default)(_props, ['backgroundColor', 'buttonStyle', 'children', 'className', 'disabled', 'disabledBackgroundColor', 'disabledLabelColor', 'fullWidth', 'icon', 'label', 'labelColor', 'labelPosition', 'labelStyle', 'overlayStyle', 'primary', 'rippleStyle', 'secondary', 'style']);\n      var prepareStyles = this.context.muiTheme.prepareStyles;\n      var styles = getStyles(this.props, this.context, this.state);\n      var mergedRippleStyles = (0, _simpleAssign2.default)({}, styles.ripple, rippleStyle);\n      var buttonEventHandlers = disabled ? {} : {\n        onMouseDown: this.handleMouseDown,\n        onMouseUp: this.handleMouseUp,\n        onMouseLeave: this.handleMouseLeave,\n        onMouseEnter: this.handleMouseEnter,\n        onTouchStart: this.handleTouchStart,\n        onTouchEnd: this.handleTouchEnd,\n        onKeyboardFocus: this.handleKeyboardFocus\n      };\n\n      var labelElement = label && _react2.default.createElement('span', {\n        style: prepareStyles((0, _simpleAssign2.default)(styles.label, labelStyle)),\n        key: 'labelElement'\n      }, label);\n\n      var iconCloned = icon && (0, _react.cloneElement)(icon, {\n        color: icon.props.color || styles.label.color,\n        style: (0, _simpleAssign2.default)(styles.icon, icon.props.style),\n        key: 'iconCloned'\n      });\n      var overlayBackgroundProxy = {\n        backgroundColor: overlayStyle && styles.overlay.backgroundColor && overlayStyle.backgroundColor || styles.overlay.backgroundColor\n      }; // Place label before or after children.\n\n      var enhancedButtonChildren = labelPosition === 'before' ? [labelElement, iconCloned, children] : [children, iconCloned, labelElement];\n      return _react2.default.createElement(_Paper2.default, {\n        className: className,\n        style: (0, _simpleAssign2.default)(styles.root, style),\n        zDepth: this.state.zDepth\n      }, _react2.default.createElement(_EnhancedButton2.default, (0, _extends3.default)({}, other, buttonEventHandlers, {\n        ref: 'container',\n        disabled: disabled,\n        style: (0, _simpleAssign2.default)(styles.button, buttonStyle),\n        focusRippleColor: mergedRippleStyles.color,\n        touchRippleColor: mergedRippleStyles.color,\n        focusRippleOpacity: mergedRippleStyles.opacity,\n        touchRippleOpacity: mergedRippleStyles.opacity\n      }), _react2.default.createElement('div', {\n        ref: 'overlay',\n        style: prepareStyles((0, _simpleAssign2.default)(styles.overlay, overlayStyle, overlayBackgroundProxy))\n      }, enhancedButtonChildren)));\n    }\n  }]);\n  return RaisedButton;\n}(_react.Component);\n\nRaisedButton.muiName = 'RaisedButton';\nRaisedButton.defaultProps = {\n  disabled: false,\n  labelPosition: 'after',\n  fullWidth: false,\n  primary: false,\n  secondary: false\n};\nRaisedButton.contextTypes = {\n  muiTheme: _propTypes2.default.object.isRequired\n};\nRaisedButton.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * Override the default background color for the button,\n   * but not the default disabled background color\n   * (use `disabledBackgroundColor` for this).\n   */\n  backgroundColor: _propTypes2.default.string,\n\n  /**\n   * Override the inline-styles of the button element.\n   */\n  buttonStyle: _propTypes2.default.object,\n\n  /**\n   * The content of the button.\n   * If a label is provided via the `label` prop, the text within the label\n   * will be displayed in addition to the content provided here.\n   */\n  children: _propTypes2.default.node,\n\n  /**\n   * The CSS class name of the root element.\n   */\n  className: _propTypes2.default.string,\n\n  /**\n    * The element to use as the container for the RaisedButton. Either a string to\n    * use a DOM element or a ReactElement. This is useful for wrapping the\n    * RaisedButton in a custom Link component. If a ReactElement is given, ensure\n    * that it passes all of its given props through to the underlying DOM\n    * element and renders its children prop for proper integration.\n    */\n  containerElement: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),\n\n  /**\n   * If true, the element's ripple effect will be disabled.\n   */\n  disableTouchRipple: _propTypes2.default.bool,\n\n  /**\n   * If true, the button will be disabled.\n   */\n  disabled: _propTypes2.default.bool,\n\n  /**\n   * Override the default background color for the button\n   * when it is disabled.\n   */\n  disabledBackgroundColor: _propTypes2.default.string,\n\n  /**\n   * The color of the button's label when the button is disabled.\n   */\n  disabledLabelColor: _propTypes2.default.string,\n\n  /**\n   * If true, the button will take up the full width of its container.\n   */\n  fullWidth: _propTypes2.default.bool,\n\n  /**\n   * The URL to link to when the button is clicked.\n   */\n  href: _propTypes2.default.string,\n\n  /**\n   * An icon to be displayed within the button.\n   */\n  icon: _propTypes2.default.node,\n\n  /**\n   * The label to be displayed within the button.\n   * If content is provided via the `children` prop, that content will be\n   * displayed in addition to the label provided here.\n   */\n  label: validateLabel,\n\n  /**\n   * The color of the button's label.\n   */\n  labelColor: _propTypes2.default.string,\n\n  /**\n   * The position of the button's label relative to the button's `children`.\n   */\n  labelPosition: _propTypes2.default.oneOf(['before', 'after']),\n\n  /**\n   * Override the inline-styles of the button's label element.\n   */\n  labelStyle: _propTypes2.default.object,\n\n  /**\n   * Callback function fired when the button is clicked.\n   *\n   * @param {object} event Click event targeting the button.\n   */\n  onClick: _propTypes2.default.func,\n\n  /** @ignore */\n  onMouseDown: _propTypes2.default.func,\n\n  /** @ignore */\n  onMouseEnter: _propTypes2.default.func,\n\n  /** @ignore */\n  onMouseLeave: _propTypes2.default.func,\n\n  /** @ignore */\n  onMouseUp: _propTypes2.default.func,\n\n  /** @ignore */\n  onTouchEnd: _propTypes2.default.func,\n\n  /** @ignore */\n  onTouchStart: _propTypes2.default.func,\n\n  /**\n   * Override the inline style of the button overlay.\n   */\n  overlayStyle: _propTypes2.default.object,\n\n  /**\n   * If true, the button will use the theme's primary color.\n   */\n  primary: _propTypes2.default.bool,\n\n  /**\n   * Override the inline style of the ripple element.\n   */\n  rippleStyle: _propTypes2.default.object,\n\n  /**\n   * If true, the button will use the theme's secondary color.\n   * If both `secondary` and `primary` are true, the button will use\n   * the theme's primary color.\n   */\n  secondary: _propTypes2.default.bool,\n\n  /**\n   * Override the inline-styles of the root element.\n   */\n  style: _propTypes2.default.object\n} : {};\nexports.default = RaisedButton;","map":null,"metadata":{},"sourceType":"script"}