{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _simpleAssign = require('simple-assign');\n\nvar _simpleAssign2 = _interopRequireDefault(_simpleAssign);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _keycode = require('keycode');\n\nvar _keycode2 = _interopRequireDefault(_keycode);\n\nvar _TextField = require('../TextField');\n\nvar _TextField2 = _interopRequireDefault(_TextField);\n\nvar _Menu = require('../Menu');\n\nvar _Menu2 = _interopRequireDefault(_Menu);\n\nvar _MenuItem = require('../MenuItem');\n\nvar _MenuItem2 = _interopRequireDefault(_MenuItem);\n\nvar _Divider = require('../Divider');\n\nvar _Divider2 = _interopRequireDefault(_Divider);\n\nvar _Popover = require('../Popover/Popover');\n\nvar _Popover2 = _interopRequireDefault(_Popover);\n\nvar _propTypes3 = require('../utils/propTypes');\n\nvar _propTypes4 = _interopRequireDefault(_propTypes3);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getStyles(props, context, state) {\n  var anchorEl = state.anchorEl;\n  var fullWidth = props.fullWidth;\n  var styles = {\n    root: {\n      display: 'inline-block',\n      position: 'relative',\n      width: fullWidth ? '100%' : 256\n    },\n    menu: {\n      width: '100%'\n    },\n    list: {\n      display: 'block',\n      width: fullWidth ? '100%' : 256\n    },\n    innerDiv: {\n      overflow: 'hidden'\n    }\n  };\n\n  if (anchorEl && fullWidth) {\n    styles.popover = {\n      width: anchorEl.clientWidth\n    };\n  }\n\n  return styles;\n}\n\nvar AutoComplete = function (_Component) {\n  (0, _inherits3.default)(AutoComplete, _Component);\n\n  function AutoComplete() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, AutoComplete);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = AutoComplete.__proto__ || (0, _getPrototypeOf2.default)(AutoComplete)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      anchorEl: null,\n      focusTextField: true,\n      open: false,\n      searchText: undefined\n    }, _this.handleRequestClose = function () {\n      // Only take into account the Popover clickAway when we are\n      // not focusing the TextField.\n      if (!_this.state.focusTextField) {\n        _this.close();\n      }\n    }, _this.handleMouseDown = function (event) {\n      // Keep the TextField focused\n      event.preventDefault();\n    }, _this.handleItemClick = function (event, child) {\n      var dataSource = _this.props.dataSource;\n      var index = parseInt(child.key, 10);\n      var chosenRequest = dataSource[index];\n\n      var searchText = _this.chosenRequestText(chosenRequest);\n\n      var updateInput = function updateInput() {\n        return _this.props.onUpdateInput(searchText, _this.props.dataSource, {\n          source: 'click'\n        });\n      };\n\n      _this.timerClickCloseId = function () {\n        return setTimeout(function () {\n          _this.timerClickCloseId = null;\n\n          _this.close();\n\n          _this.props.onNewRequest(chosenRequest, index);\n        }, _this.props.menuCloseDelay);\n      };\n\n      if (typeof _this.props.searchText !== 'undefined') {\n        updateInput();\n\n        _this.timerClickCloseId();\n      } else {\n        _this.setState({\n          searchText: searchText\n        }, function () {\n          updateInput();\n\n          _this.timerClickCloseId();\n        });\n      }\n    }, _this.chosenRequestText = function (chosenRequest) {\n      if (typeof chosenRequest === 'string') {\n        return chosenRequest;\n      } else {\n        return chosenRequest[_this.props.dataSourceConfig.text];\n      }\n    }, _this.handleEscKeyDown = function () {\n      _this.close();\n    }, _this.handleKeyDown = function (event) {\n      if (_this.props.onKeyDown) _this.props.onKeyDown(event);\n\n      switch ((0, _keycode2.default)(event)) {\n        case 'enter':\n          _this.close();\n\n          var searchText = _this.state.searchText;\n\n          if (searchText !== '') {\n            _this.props.onNewRequest(searchText, -1);\n          }\n\n          break;\n\n        case 'esc':\n          _this.close();\n\n          break;\n\n        case 'down':\n          event.preventDefault();\n\n          _this.setState({\n            open: true,\n            focusTextField: false,\n            anchorEl: _reactDom2.default.findDOMNode(_this.refs.searchTextField)\n          });\n\n          break;\n\n        default:\n          break;\n      }\n    }, _this.handleChange = function (event) {\n      var searchText = event.target.value; // Make sure that we have a new searchText.\n      // Fix an issue with a Cordova Webview\n\n      if (searchText === _this.state.searchText) {\n        return;\n      }\n\n      var state = {\n        open: true,\n        anchorEl: _reactDom2.default.findDOMNode(_this.refs.searchTextField)\n      };\n\n      if (_this.props.searchText === undefined) {\n        state.searchText = searchText;\n      }\n\n      _this.setState(state);\n\n      _this.props.onUpdateInput(searchText, _this.props.dataSource, {\n        source: 'change'\n      });\n    }, _this.handleBlur = function (event) {\n      if (_this.state.focusTextField && _this.timerClickCloseId === null) {\n        _this.timerBlurClose = setTimeout(function () {\n          _this.close();\n        }, 0);\n      }\n\n      if (_this.props.onBlur) {\n        _this.props.onBlur(event);\n      }\n    }, _this.handleFocus = function (event) {\n      if (!_this.state.open && _this.props.openOnFocus) {\n        _this.setState({\n          open: true,\n          anchorEl: _reactDom2.default.findDOMNode(_this.refs.searchTextField)\n        });\n      }\n\n      _this.setState({\n        focusTextField: true\n      });\n\n      if (_this.props.onFocus) {\n        _this.props.onFocus(event);\n      }\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  (0, _createClass3.default)(AutoComplete, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.requestsList = [];\n      this.setState({\n        open: this.props.open,\n        searchText: this.props.searchText || ''\n      });\n      this.timerClickCloseId = null;\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.searchText !== nextProps.searchText) {\n        this.setState({\n          searchText: nextProps.searchText\n        });\n      }\n\n      if (this.props.open !== nextProps.open) {\n        this.setState({\n          open: nextProps.open,\n          anchorEl: _reactDom2.default.findDOMNode(this.refs.searchTextField)\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      clearTimeout(this.timerClickCloseId);\n      clearTimeout(this.timerBlurClose);\n    }\n  }, {\n    key: 'close',\n    value: function close() {\n      this.setState({\n        open: false,\n        anchorEl: null\n      });\n\n      if (this.props.onClose) {\n        this.props.onClose();\n      }\n    }\n  }, {\n    key: 'blur',\n    value: function blur() {\n      this.refs.searchTextField.blur();\n    }\n  }, {\n    key: 'focus',\n    value: function focus() {\n      this.refs.searchTextField.focus();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          anchorOrigin = _props.anchorOrigin,\n          animated = _props.animated,\n          animation = _props.animation,\n          dataSource = _props.dataSource,\n          dataSourceConfig = _props.dataSourceConfig,\n          disableFocusRipple = _props.disableFocusRipple,\n          errorStyle = _props.errorStyle,\n          floatingLabelText = _props.floatingLabelText,\n          filter = _props.filter,\n          fullWidth = _props.fullWidth,\n          style = _props.style,\n          hintText = _props.hintText,\n          maxSearchResults = _props.maxSearchResults,\n          menuCloseDelay = _props.menuCloseDelay,\n          textFieldStyle = _props.textFieldStyle,\n          menuStyle = _props.menuStyle,\n          menuProps = _props.menuProps,\n          listStyle = _props.listStyle,\n          targetOrigin = _props.targetOrigin,\n          onBlur = _props.onBlur,\n          onClose = _props.onClose,\n          onFocus = _props.onFocus,\n          onKeyDown = _props.onKeyDown,\n          onNewRequest = _props.onNewRequest,\n          onUpdateInput = _props.onUpdateInput,\n          openOnFocus = _props.openOnFocus,\n          popoverProps = _props.popoverProps,\n          searchTextProp = _props.searchText,\n          other = (0, _objectWithoutProperties3.default)(_props, ['anchorOrigin', 'animated', 'animation', 'dataSource', 'dataSourceConfig', 'disableFocusRipple', 'errorStyle', 'floatingLabelText', 'filter', 'fullWidth', 'style', 'hintText', 'maxSearchResults', 'menuCloseDelay', 'textFieldStyle', 'menuStyle', 'menuProps', 'listStyle', 'targetOrigin', 'onBlur', 'onClose', 'onFocus', 'onKeyDown', 'onNewRequest', 'onUpdateInput', 'openOnFocus', 'popoverProps', 'searchText']);\n\n      var _ref2 = popoverProps || {},\n          popoverStyle = _ref2.style,\n          popoverOther = (0, _objectWithoutProperties3.default)(_ref2, ['style']);\n\n      var _state = this.state,\n          open = _state.open,\n          anchorEl = _state.anchorEl,\n          searchText = _state.searchText,\n          focusTextField = _state.focusTextField;\n      var prepareStyles = this.context.muiTheme.prepareStyles;\n      var styles = getStyles(this.props, this.context, this.state);\n      var requestsList = [];\n      dataSource.every(function (item, index) {\n        switch (typeof item === 'undefined' ? 'undefined' : (0, _typeof3.default)(item)) {\n          case 'string':\n            if (filter(searchText, item, item)) {\n              requestsList.push({\n                text: item,\n                value: _react2.default.createElement(_MenuItem2.default, {\n                  innerDivStyle: styles.innerDiv,\n                  value: item,\n                  primaryText: item,\n                  disableFocusRipple: disableFocusRipple,\n                  key: index\n                })\n              });\n            }\n\n            break;\n\n          case 'object':\n            if (item && typeof item[_this2.props.dataSourceConfig.text] === 'string') {\n              var itemText = item[_this2.props.dataSourceConfig.text];\n              if (!_this2.props.filter(searchText, itemText, item)) break;\n              var itemValue = item[_this2.props.dataSourceConfig.value];\n\n              if (itemValue && itemValue.type && (itemValue.type.muiName === _MenuItem2.default.muiName || itemValue.type.muiName === _Divider2.default.muiName)) {\n                requestsList.push({\n                  text: itemText,\n                  value: _react2.default.cloneElement(itemValue, {\n                    key: index,\n                    disableFocusRipple: disableFocusRipple\n                  })\n                });\n              } else {\n                requestsList.push({\n                  text: itemText,\n                  value: _react2.default.createElement(_MenuItem2.default, {\n                    innerDivStyle: styles.innerDiv,\n                    primaryText: itemText,\n                    disableFocusRipple: disableFocusRipple,\n                    key: index\n                  })\n                });\n              }\n            }\n\n            break;\n\n          default: // Do nothing\n\n        }\n\n        return !(maxSearchResults && maxSearchResults > 0 && requestsList.length === maxSearchResults);\n      });\n      this.requestsList = requestsList;\n\n      var menu = open && requestsList.length > 0 && _react2.default.createElement(_Menu2.default, (0, _extends3.default)({\n        ref: 'menu',\n        autoWidth: false,\n        disableAutoFocus: focusTextField,\n        onEscKeyDown: this.handleEscKeyDown,\n        initiallyKeyboardFocused: true,\n        onItemClick: this.handleItemClick,\n        onMouseDown: this.handleMouseDown,\n        style: (0, _simpleAssign2.default)(styles.menu, menuStyle),\n        listStyle: (0, _simpleAssign2.default)(styles.list, listStyle)\n      }, menuProps), requestsList.map(function (i) {\n        return i.value;\n      }));\n\n      return _react2.default.createElement('div', {\n        style: prepareStyles((0, _simpleAssign2.default)(styles.root, style))\n      }, _react2.default.createElement(_TextField2.default, (0, _extends3.default)({\n        ref: 'searchTextField',\n        autoComplete: 'off',\n        onBlur: this.handleBlur,\n        onFocus: this.handleFocus,\n        onKeyDown: this.handleKeyDown,\n        floatingLabelText: floatingLabelText,\n        hintText: hintText,\n        fullWidth: fullWidth,\n        multiLine: false,\n        errorStyle: errorStyle,\n        style: textFieldStyle\n      }, other, {\n        // value and onChange are idiomatic properties often leaked.\n        // We prevent their overrides in order to reduce potential bugs.\n        value: searchText,\n        onChange: this.handleChange\n      })), _react2.default.createElement(_Popover2.default, (0, _extends3.default)({\n        style: (0, _simpleAssign2.default)({}, styles.popover, popoverStyle),\n        canAutoPosition: false,\n        anchorOrigin: anchorOrigin,\n        targetOrigin: targetOrigin,\n        open: open,\n        anchorEl: anchorEl,\n        useLayerForClickAway: false,\n        onRequestClose: this.handleRequestClose,\n        animated: animated,\n        animation: animation\n      }, popoverOther), menu));\n    }\n  }]);\n  return AutoComplete;\n}(_react.Component);\n\nAutoComplete.defaultProps = {\n  anchorOrigin: {\n    vertical: 'bottom',\n    horizontal: 'left'\n  },\n  animated: true,\n  dataSourceConfig: {\n    text: 'text',\n    value: 'value'\n  },\n  disableFocusRipple: true,\n  filter: function filter(searchText, key) {\n    return searchText !== '' && key.indexOf(searchText) !== -1;\n  },\n  fullWidth: false,\n  open: false,\n  openOnFocus: false,\n  onUpdateInput: function onUpdateInput() {},\n  onNewRequest: function onNewRequest() {},\n  menuCloseDelay: 300,\n  targetOrigin: {\n    vertical: 'top',\n    horizontal: 'left'\n  }\n};\nAutoComplete.contextTypes = {\n  muiTheme: _propTypes2.default.object.isRequired\n};\nAutoComplete.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * Location of the anchor for the auto complete.\n   */\n  anchorOrigin: _propTypes4.default.origin,\n\n  /**\n   * If true, the auto complete is animated as it is toggled.\n   */\n  animated: _propTypes2.default.bool,\n\n  /**\n   * Override the default animation component used.\n   */\n  animation: _propTypes2.default.func,\n\n  /**\n   * Array of strings or nodes used to populate the list.\n   */\n  dataSource: _propTypes2.default.array.isRequired,\n\n  /**\n   * Config for objects list dataSource.\n   *\n   * @typedef {Object} dataSourceConfig\n   *\n   * @property {string} text `dataSource` element key used to find a string to be matched for search\n   * and shown as a `TextField` input value after choosing the result.\n   * @property {string} value `dataSource` element key used to find a string to be shown in search results.\n   */\n  dataSourceConfig: _propTypes2.default.object,\n\n  /**\n   * Disables focus ripple when true.\n   */\n  disableFocusRipple: _propTypes2.default.bool,\n\n  /**\n   * Override style prop for error.\n   */\n  errorStyle: _propTypes2.default.object,\n\n  /**\n   * The error content to display.\n   */\n  errorText: _propTypes2.default.node,\n\n  /**\n   * Callback function used to filter the auto complete.\n   *\n   * @param {string} searchText The text to search for within `dataSource`.\n   * @param {string} key `dataSource` element, or `text` property on that element if it's not a string.\n   * @returns {boolean} `true` indicates the auto complete list will include `key` when the input is `searchText`.\n   */\n  filter: _propTypes2.default.func,\n\n  /**\n   * The content to use for adding floating label element.\n   */\n  floatingLabelText: _propTypes2.default.node,\n\n  /**\n   * If true, the field receives the property `width: 100%`.\n   */\n  fullWidth: _propTypes2.default.bool,\n\n  /**\n   * The hint content to display.\n   */\n  hintText: _propTypes2.default.node,\n\n  /**\n   * Override style for list.\n   */\n  listStyle: _propTypes2.default.object,\n\n  /**\n   * The max number of search results to be shown.\n   * By default it shows all the items which matches filter.\n   */\n  maxSearchResults: _propTypes2.default.number,\n\n  /**\n   * Delay for closing time of the menu.\n   */\n  menuCloseDelay: _propTypes2.default.number,\n\n  /**\n   * Props to be passed to menu.\n   */\n  menuProps: _propTypes2.default.object,\n\n  /**\n   * Override style for menu.\n   */\n  menuStyle: _propTypes2.default.object,\n\n  /** @ignore */\n  onBlur: _propTypes2.default.func,\n\n  /**\n   * Callback function fired when the menu is closed.\n   */\n  onClose: _propTypes2.default.func,\n\n  /** @ignore */\n  onFocus: _propTypes2.default.func,\n\n  /** @ignore */\n  onKeyDown: _propTypes2.default.func,\n\n  /**\n   * Callback function that is fired when a list item is selected, or enter is pressed in the `TextField`.\n   *\n   * @param {string} chosenRequest Either the `TextField` input value, if enter is pressed in the `TextField`,\n   * or the dataSource object corresponding to the list item that was selected.\n   * @param {number} index The index in `dataSource` of the list item selected, or `-1` if enter is pressed in the\n   * `TextField`.\n   */\n  onNewRequest: _propTypes2.default.func,\n\n  /**\n   * Callback function that is fired when the user updates the `TextField`.\n   *\n   * @param {string} searchText The auto-complete's `searchText` value.\n   * @param {array} dataSource The auto-complete's `dataSource` array.\n   * @param {object} params Additional information linked the update.\n   */\n  onUpdateInput: _propTypes2.default.func,\n\n  /**\n   * Auto complete menu is open if true.\n   */\n  open: _propTypes2.default.bool,\n\n  /**\n   * If true, the list item is showed when a focus event triggers.\n   */\n  openOnFocus: _propTypes2.default.bool,\n\n  /**\n   * Props to be passed to popover.\n   */\n  popoverProps: _propTypes2.default.object,\n\n  /**\n   * Text being input to auto complete.\n   */\n  searchText: _propTypes2.default.string,\n\n  /**\n   * Override the inline-styles of the root element.\n   */\n  style: _propTypes2.default.object,\n\n  /**\n   * Origin for location of target.\n   */\n  targetOrigin: _propTypes4.default.origin,\n\n  /**\n   * Override the inline-styles of AutoComplete's TextField element.\n   */\n  textFieldStyle: _propTypes2.default.object\n} : {};\n\nAutoComplete.levenshteinDistance = function (searchText, key) {\n  var current = [];\n  var prev = void 0;\n  var value = void 0;\n\n  for (var i = 0; i <= key.length; i++) {\n    for (var j = 0; j <= searchText.length; j++) {\n      if (i && j) {\n        if (searchText.charAt(j - 1) === key.charAt(i - 1)) value = prev;else value = Math.min(current[j], current[j - 1], prev) + 1;\n      } else {\n        value = i + j;\n      }\n\n      prev = current[j];\n      current[j] = value;\n    }\n  }\n\n  return current.pop();\n};\n\nAutoComplete.noFilter = function () {\n  return true;\n};\n\nAutoComplete.defaultFilter = AutoComplete.caseSensitiveFilter = function (searchText, key) {\n  return searchText !== '' && key.indexOf(searchText) !== -1;\n};\n\nAutoComplete.caseInsensitiveFilter = function (searchText, key) {\n  return key.toLowerCase().indexOf(searchText.toLowerCase()) !== -1;\n};\n\nAutoComplete.levenshteinDistanceFilter = function (distanceLessThan) {\n  if (distanceLessThan === undefined) {\n    return AutoComplete.levenshteinDistance;\n  } else if (typeof distanceLessThan !== 'number') {\n    throw 'Error: AutoComplete.levenshteinDistanceFilter is a filter generator, not a filter!';\n  }\n\n  return function (s, k) {\n    return AutoComplete.levenshteinDistance(s, k) < distanceLessThan;\n  };\n};\n\nAutoComplete.fuzzyFilter = function (searchText, key) {\n  var compareString = key.toLowerCase();\n  searchText = searchText.toLowerCase();\n  var searchTextIndex = 0;\n\n  for (var index = 0; index < key.length; index++) {\n    if (compareString[index] === searchText[searchTextIndex]) {\n      searchTextIndex += 1;\n    }\n  }\n\n  return searchTextIndex === searchText.length;\n};\n\nAutoComplete.Item = _MenuItem2.default;\nAutoComplete.Divider = _Divider2.default;\nexports.default = AutoComplete;","map":null,"metadata":{},"sourceType":"script"}