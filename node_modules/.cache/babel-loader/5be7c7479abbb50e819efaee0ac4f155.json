{"ast":null,"code":"'use strict';\n\nvar _get = require('babel-runtime/helpers/get')['default'];\n\nvar _inherits = require('babel-runtime/helpers/inherits')['default'];\n\nvar _createClass = require('babel-runtime/helpers/create-class')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _defineProperty = require('babel-runtime/helpers/define-property')['default'];\n\nvar _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];\n\nvar _Object$keys = require('babel-runtime/core-js/object/keys')['default'];\n\nvar _Object$assign2 = require('babel-runtime/core-js/object/assign')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _InputContainer2 = require('./InputContainer');\n\nvar _InputContainer3 = _interopRequireDefault(_InputContainer2);\n\nvar _ValidatedInput = require('./ValidatedInput');\n\nvar _ValidatedInput2 = _interopRequireDefault(_ValidatedInput);\n\nvar _RadioGroup = require('./RadioGroup');\n\nvar _RadioGroup2 = _interopRequireDefault(_RadioGroup);\n\nvar _Validator = require('./Validator');\n\nvar _Validator2 = _interopRequireDefault(_Validator);\n\nvar _FileValidator = require('./FileValidator');\n\nvar _FileValidator2 = _interopRequireDefault(_FileValidator);\n\nfunction getInputErrorMessage(input, ruleName) {\n  var errorHelp = input.props.errorHelp;\n\n  if (typeof errorHelp === 'object') {\n    return errorHelp[ruleName];\n  } else {\n    return errorHelp;\n  }\n}\n\nvar Form = function (_InputContainer) {\n  _inherits(Form, _InputContainer);\n\n  function Form(props) {\n    _classCallCheck(this, Form);\n\n    _get(Object.getPrototypeOf(Form.prototype), 'constructor', this).call(this, props);\n\n    this.state = {\n      isValid: true,\n      invalidInputs: {}\n    };\n  }\n\n  _createClass(Form, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      _get(Object.getPrototypeOf(Form.prototype), 'componentWillMount', this).call(this);\n\n      this._validators = {};\n    }\n  }, {\n    key: 'registerInput',\n    value: function registerInput(input) {\n      _get(Object.getPrototypeOf(Form.prototype), 'registerInput', this).call(this, input);\n\n      if (typeof input.props.validate === 'string') {\n        this._validators[input.props.name] = this._compileValidationRules(input, input.props.validate);\n      }\n    }\n  }, {\n    key: 'unregisterInput',\n    value: function unregisterInput(input) {\n      _get(Object.getPrototypeOf(Form.prototype), 'unregisterInput', this).call(this, input);\n\n      delete this._validators[input.props.name];\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return _react2['default'].createElement('form', {\n        ref: \"form\",\n        onSubmit: this._handleSubmit.bind(this),\n        action: \"#\",\n        className: this.props.className\n      }, this._renderChildren(this.props.children));\n    }\n  }, {\n    key: 'getValues',\n    value: function getValues() {\n      var _this = this;\n\n      return _Object$keys(this._inputs).reduce(function (values, name) {\n        values[name] = _this._getValue(name);\n        return values;\n      }, {});\n    }\n  }, {\n    key: 'submit',\n    value: function submit() {\n      this._handleSubmit();\n    }\n  }, {\n    key: '_renderChildren',\n    value: function _renderChildren(children) {\n      var _this2 = this;\n\n      if (typeof children !== 'object' || children === null) {\n        return children;\n      }\n\n      var childrenCount = _react2['default'].Children.count(children);\n\n      if (childrenCount > 1) {\n        return _react2['default'].Children.map(children, function (child) {\n          return _this2._renderChild(child);\n        });\n      } else if (childrenCount === 1) {\n        return this._renderChild(Array.isArray(children) ? children[0] : children);\n      }\n    }\n  }, {\n    key: '_renderChild',\n    value: function _renderChild(child) {\n      var _this3 = this;\n\n      if (typeof child !== 'object' || child === null) {\n        return child;\n      }\n\n      var model = this.props.model || {};\n\n      if (child.type === _ValidatedInput2['default'] || child.type === _RadioGroup2['default'] || child.type && child.type.prototype !== null && (child.type.prototype instanceof _ValidatedInput2['default'] || child.type.prototype instanceof _RadioGroup2['default'])) {\n        var _ret = function () {\n          var name = child.props && child.props.name;\n\n          if (!name) {\n            throw new Error('Can not add input without \"name\" attribute');\n          }\n\n          var newProps = {\n            _registerInput: _this3.registerInput.bind(_this3),\n            _unregisterInput: _this3.unregisterInput.bind(_this3)\n          };\n          var evtName = child.props.validationEvent ? child.props.validationEvent : _this3.props.validationEvent;\n          var origCallback = child.props[evtName];\n\n          newProps[evtName] = function (e) {\n            _this3._validateInput(name);\n\n            return origCallback && origCallback(e);\n          };\n\n          if (name in model) {\n            if (child.props.type === 'checkbox') {\n              newProps.defaultChecked = model[name];\n            } else {\n              newProps.defaultValue = model[name];\n            }\n          }\n\n          var error = _this3._hasError(name);\n\n          if (error) {\n            newProps.bsStyle = 'error';\n\n            if (typeof error === 'string') {\n              newProps.help = error;\n            } else if (child.props.errorHelp) {\n              newProps.help = child.props.errorHelp;\n            }\n          }\n\n          return {\n            v: _react2['default'].cloneElement(child, newProps)\n          };\n        }();\n\n        if (typeof _ret === 'object') return _ret.v;\n      } else {\n        return _react2['default'].cloneElement(child, {}, this._renderChildren(child.props && child.props.children));\n      }\n    }\n  }, {\n    key: '_validateInput',\n    value: function _validateInput(name) {\n      this._validateOne(name, this.getValues());\n    }\n  }, {\n    key: '_hasError',\n    value: function _hasError(iptName) {\n      return this.state.invalidInputs[iptName];\n    }\n  }, {\n    key: '_setError',\n    value: function _setError(iptName, isError, errText) {\n      if (isError && errText && typeof errText !== 'string' && typeof errText !== 'boolean') {\n        errText = errText + '';\n      } // set value to either bool or error description string\n\n\n      this.setState({\n        invalidInputs: _Object$assign2(this.state.invalidInputs, _defineProperty({}, iptName, isError ? errText || true : false))\n      });\n    }\n  }, {\n    key: '_validateOne',\n    value: function _validateOne(iptName, context) {\n      var input = this._inputs[iptName];\n\n      if (Array.isArray(input)) {\n        console.warn('Multiple inputs use the same name \"' + iptName + '\"');\n        return false;\n      }\n\n      var value = context[iptName];\n      var isValid = true;\n      var validate = input.props.validate;\n      var result = undefined,\n          error = undefined;\n\n      if (typeof this.props.validateOne === 'function') {\n        result = this.props.validateOne(iptName, value, context);\n      } else if (typeof validate === 'function') {\n        result = validate(value, context);\n      } else if (typeof validate === 'string') {\n        result = this._validators[iptName](value);\n      } else {\n        result = true;\n      } // if result is !== true, it is considered an error\n      // it can be either bool or string error\n\n\n      if (result !== true) {\n        isValid = false;\n\n        if (typeof result === 'string') {\n          error = result;\n        }\n      }\n\n      this._setError(iptName, !isValid, error);\n\n      return isValid;\n    }\n  }, {\n    key: '_validateAll',\n    value: function _validateAll(context) {\n      var _this4 = this;\n\n      var isValid = true;\n      var errors = [];\n\n      if (typeof this.props.validateAll === 'function') {\n        (function () {\n          var result = _this4.props.validateAll(context);\n\n          if (result !== true) {\n            isValid = false;\n\n            _Object$keys(result).forEach(function (iptName) {\n              errors.push(iptName);\n\n              _this4._setError(iptName, true, result[iptName]);\n            });\n          }\n        })();\n      } else {\n        _Object$keys(this._inputs).forEach(function (iptName) {\n          if (!_this4._validateOne(iptName, context)) {\n            isValid = false;\n            errors.push(iptName);\n          }\n        });\n      }\n\n      return {\n        isValid: isValid,\n        errors: errors\n      };\n    }\n  }, {\n    key: '_compileValidationRules',\n    value: function _compileValidationRules(input, ruleProp) {\n      var _this5 = this;\n\n      var rules = ruleProp.split(',').map(function (rule) {\n        var params = rule.split(':');\n        var name = params.shift();\n        var inverse = name[0] === '!';\n\n        if (inverse) {\n          name = name.substr(1);\n        }\n\n        return {\n          name: name,\n          inverse: inverse,\n          params: params\n        };\n      });\n      var validator = (input.props && input.props.type) === 'file' ? _FileValidator2['default'] : _Validator2['default'];\n      return function (val) {\n        var result = true;\n        rules.forEach(function (rule) {\n          if (typeof validator[rule.name] !== 'function') {\n            throw new Error('Invalid input validation rule \"' + rule.name + '\"');\n          }\n\n          var ruleResult = validator[rule.name].apply(validator, [val].concat(_toConsumableArray(rule.params)));\n\n          if (rule.inverse) {\n            ruleResult = !ruleResult;\n          }\n\n          if (result === true && ruleResult !== true) {\n            result = getInputErrorMessage(input, rule.name) || getInputErrorMessage(_this5, rule.name) || false;\n          }\n        });\n        return result;\n      };\n    }\n  }, {\n    key: '_getValue',\n    value: function _getValue(iptName) {\n      var input = this._inputs[iptName];\n\n      if (Array.isArray(input)) {\n        console.warn('Multiple inputs use the same name \"' + iptName + '\"');\n        return false;\n      }\n\n      var value = undefined;\n\n      if (input.props.type === 'checkbox') {\n        value = input.getChecked();\n      } else if (input.props.type === 'file') {\n        value = input.getInputDOMNode().files;\n      } else {\n        value = input.getValue();\n      }\n\n      return value;\n    }\n  }, {\n    key: '_handleSubmit',\n    value: function _handleSubmit(e) {\n      if (e) {\n        e.preventDefault();\n      }\n\n      var values = this.getValues();\n\n      var _validateAll2 = this._validateAll(values);\n\n      var isValid = _validateAll2.isValid;\n      var errors = _validateAll2.errors;\n\n      if (isValid) {\n        this.props.onValidSubmit(values);\n      } else {\n        this.props.onInvalidSubmit(errors, values);\n      }\n    }\n  }]);\n\n  return Form;\n}(_InputContainer3['default']);\n\nexports['default'] = Form;\nForm.propTypes = {\n  className: _react2['default'].PropTypes.string,\n  model: _react2['default'].PropTypes.object,\n  onValidSubmit: _react2['default'].PropTypes.func.isRequired,\n  onInvalidSubmit: _react2['default'].PropTypes.func,\n  validateOne: _react2['default'].PropTypes.func,\n  validateAll: _react2['default'].PropTypes.func,\n  validationEvent: _react2['default'].PropTypes.oneOf(['onChange', 'onBlur', 'onFocus']),\n  errorHelp: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.object])\n};\nForm.defaultProps = {\n  model: {},\n  validationEvent: 'onChange',\n  onInvalidSubmit: function onInvalidSubmit() {}\n};\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}