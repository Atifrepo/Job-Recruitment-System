{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction iterate(files, cb) {\n  Array.prototype.forEach.call(files, cb);\n}\n\nfunction getTotalFileSize(files) {\n  var result = 0;\n  iterate(files, function (file) {\n    return result += file.size;\n  });\n  return result;\n}\n\nfunction getFileExtension(filename) {\n  return filename.substr((~-filename.lastIndexOf('.') >>> 0) + 2).toLowerCase();\n}\n\nvar FileValidator = {\n  extend: function extend(name, fn) {\n    this[name] = fn;\n  },\n\n  /**\n   * Returns `true` if there are no files in file list\n   *\n   * @param {FileList} files File list\n   * @returns {Boolean}\n   */\n  isEmpty: function isEmpty(files) {\n    return files.length === 0;\n  },\n\n  /**\n   * Returns `true` if files count equals to 1\n   *\n   * @param {FileList} files File list\n   * @returns {Boolean}\n   */\n  isSingle: function isSingle(files) {\n    return files.length === 1;\n  },\n\n  /**\n   * Returns `true` if files count is more than 1\n   *\n   * @param {FileList} files File list\n   * @returns {Boolean}\n   */\n  isMultiple: function isMultiple(files) {\n    return files.length > 1;\n  },\n\n  /**\n   * Returns `true` if files count is within allowed range.\n   * If `max` is not supplied, checks if files count equals `min`.\n   *\n   * @param {FileList} files File list\n   * @param {Number} min Minimum files count\n   * @param {Number} [max] Maximum files count\n   * @returns {Boolean}\n   */\n  isFilesCount: function isFilesCount(files, min, max) {\n    if (!max) {\n      return files.length === min;\n    } else {\n      return files.length >= min && files.length <= max;\n    }\n  },\n\n  /**\n   * Returns `true` if total size of all files is within allowed range.\n   *\n   * @param {FileList} files File list\n   * @param {Number} min Minimum size\n   * @param {Number} [max] Maximum size\n   * @returns {Boolean}\n   */\n  isTotalSize: function isTotalSize(files, min, max) {\n    var totalSize = getTotalFileSize(files);\n    return totalSize >= min && (!max || totalSize <= max);\n  },\n\n  /**\n   * Returns `true` if each file's size is within allowed range\n   *\n   * @param {FileList} files File list\n   * @param {Number} min Minimum size\n   * @param {Number} [max] Maximum size\n   * @returns {Boolean}\n   */\n  isEachFileSize: function isEachFileSize(files, min, max) {\n    var allValid = true;\n    iterate(files, function (file) {\n      var fileValid = file.size >= min && (!max || file.size <= max);\n\n      if (!fileValid) {\n        allValid = false;\n      }\n    });\n    return allValid;\n  },\n\n  /**\n   * Returns `true` if each file's extension is in the `extensions` array\n   *\n   * @param {FileList} files File list\n   * @param {Array} extensions Array of allowed file extensions. All extensions must be lower-case.\n   * @returns {Boolean}\n   */\n  isExtension: function isExtension(files, extensions) {\n    var allValid = true;\n    iterate(files, function (file) {\n      var ext = getFileExtension(file.name);\n\n      if (extensions.indexOf(ext) === -1) {\n        allValid = false;\n      }\n    });\n    return allValid;\n  },\n\n  /**\n   * Returns `true` if each file's mime type is in the `types` array\n   *\n   * @param {FileList} files File list\n   * @param {Array} types Array of allowed mime types\n   * @returns {Boolean}\n   */\n  isType: function isType(files, types) {\n    var allValid = true;\n    iterate(files, function (file) {\n      if (types.indexOf(file.type) === -1) {\n        allValid = false;\n      }\n    });\n    return allValid;\n  }\n};\nexports['default'] = FileValidator;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}