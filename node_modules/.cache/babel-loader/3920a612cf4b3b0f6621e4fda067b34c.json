{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _simpleAssign = require('simple-assign');\n\nvar _simpleAssign2 = _interopRequireDefault(_simpleAssign);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _keycode = require('keycode');\n\nvar _keycode2 = _interopRequireDefault(_keycode);\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _transitions = require('../styles/transitions');\n\nvar _transitions2 = _interopRequireDefault(_transitions);\n\nvar _FocusRipple = require('../internal/FocusRipple');\n\nvar _FocusRipple2 = _interopRequireDefault(_FocusRipple);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Verifies min/max range.\n * @param   {Object} props         Properties of the React component.\n * @param   {String} propName      Name of the property to validate.\n * @param   {String} componentName Name of the component whose property is being validated.\n * @returns {Object} Returns an Error if min >= max otherwise null.\n */\n\n\nvar minMaxPropType = function minMaxPropType(props, propName, componentName) {\n  for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    rest[_key - 3] = arguments[_key];\n  }\n\n  var error = _propTypes2.default.number.apply(_propTypes2.default, [props, propName, componentName].concat(rest));\n\n  if (error !== null) {\n    return error;\n  }\n\n  if (props.min >= props.max) {\n    var errorMsg = propName === 'min' ? 'min should be less than max' : 'max should be greater than min';\n    return new Error(errorMsg);\n  }\n};\n/**\n * Verifies value is within the min/max range.\n * @param   {Object} props         Properties of the React component.\n * @param   {String} propName      Name of the property to validate.\n * @param   {String} componentName Name of the component whose property is being validated.\n * @returns {Object} Returns an Error if the value is not within the range otherwise null.\n */\n\n\nvar valueInRangePropType = function valueInRangePropType(props, propName, componentName) {\n  for (var _len2 = arguments.length, rest = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n    rest[_key2 - 3] = arguments[_key2];\n  }\n\n  var error = _propTypes2.default.number.apply(_propTypes2.default, [props, propName, componentName].concat(rest));\n\n  if (error !== null) {\n    return error;\n  }\n\n  var value = props[propName];\n\n  if (value < props.min || props.max < value) {\n    return new Error(propName + ' should be within the range specified by min and max');\n  }\n};\n\nvar crossAxisProperty = {\n  x: 'height',\n  'x-reverse': 'height',\n  y: 'width',\n  'y-reverse': 'width'\n};\nvar crossAxisOffsetProperty = {\n  x: 'top',\n  'x-reverse': 'top',\n  y: 'left',\n  'y-reverse': 'left'\n};\nvar mainAxisProperty = {\n  x: 'width',\n  'x-reverse': 'width',\n  y: 'height',\n  'y-reverse': 'height'\n};\nvar mainAxisMarginFromEnd = {\n  x: 'marginRight',\n  'x-reverse': 'marginLeft',\n  y: 'marginTop',\n  'y-reverse': 'marginBottom'\n};\nvar mainAxisMarginFromStart = {\n  x: 'marginLeft',\n  'x-reverse': 'marginRight',\n  y: 'marginBottom',\n  'y-reverse': 'marginTop'\n};\nvar mainAxisOffsetProperty = {\n  x: 'left',\n  'x-reverse': 'right',\n  y: 'bottom',\n  'y-reverse': 'top'\n};\nvar mainAxisClientProperty = {\n  x: 'clientWidth',\n  'x-reverse': 'clientWidth',\n  y: 'clientHeight',\n  'y-reverse': 'clientHeight'\n};\nvar mainAxisClientOffsetProperty = {\n  x: 'clientX',\n  'x-reverse': 'clientX',\n  y: 'clientY',\n  'y-reverse': 'clientY'\n};\nvar reverseMainAxisOffsetProperty = {\n  x: 'right',\n  'x-reverse': 'left',\n  y: 'top',\n  'y-reverse': 'bottom'\n};\n\nvar isMouseControlInverted = function isMouseControlInverted(axis) {\n  return axis === 'x-reverse' || axis === 'y';\n};\n\nvar calculateAxis = function calculateAxis(axis, isRtl) {\n  if (isRtl) {\n    switch (axis) {\n      case 'x':\n        return 'x-reverse';\n\n      case 'x-reverse':\n        return 'x';\n    }\n  }\n\n  return axis;\n};\n\nfunction getPercent(value, min, max) {\n  var percent = (value - min) / (max - min);\n\n  if (isNaN(percent)) {\n    percent = 0;\n  }\n\n  return percent;\n}\n\nvar getStyles = function getStyles(props, context, state) {\n  var _slider, _track, _filledAndRemaining, _handle, _objectAssign2, _objectAssign3;\n\n  var axis = props.axis,\n      disabled = props.disabled,\n      max = props.max,\n      min = props.min;\n  var _context$muiTheme = context.muiTheme,\n      isRtl = _context$muiTheme.isRtl,\n      _context$muiTheme$sli = _context$muiTheme.slider,\n      handleColorZero = _context$muiTheme$sli.handleColorZero,\n      handleFillColor = _context$muiTheme$sli.handleFillColor,\n      handleSize = _context$muiTheme$sli.handleSize,\n      handleSizeDisabled = _context$muiTheme$sli.handleSizeDisabled,\n      handleSizeActive = _context$muiTheme$sli.handleSizeActive,\n      trackSize = _context$muiTheme$sli.trackSize,\n      trackColor = _context$muiTheme$sli.trackColor,\n      trackColorSelected = _context$muiTheme$sli.trackColorSelected,\n      rippleColor = _context$muiTheme$sli.rippleColor,\n      selectionColor = _context$muiTheme$sli.selectionColor;\n  var fillGutter = handleSize / 2;\n  var disabledGutter = trackSize + handleSizeDisabled / 2;\n  var calcDisabledSpacing = disabled ? ' - ' + disabledGutter + 'px' : '';\n  var percent = getPercent(state.value, min, max);\n  var calculatedAxis = calculateAxis(axis, isRtl);\n  var styles = {\n    slider: (_slider = {\n      touchCallout: 'none',\n      userSelect: 'none',\n      cursor: 'default'\n    }, (0, _defineProperty3.default)(_slider, crossAxisProperty[calculatedAxis], handleSizeActive), (0, _defineProperty3.default)(_slider, mainAxisProperty[calculatedAxis], '100%'), (0, _defineProperty3.default)(_slider, 'position', 'relative'), (0, _defineProperty3.default)(_slider, 'marginTop', 24), (0, _defineProperty3.default)(_slider, 'marginBottom', 48), _slider),\n    track: (_track = {\n      position: 'absolute'\n    }, (0, _defineProperty3.default)(_track, crossAxisOffsetProperty[calculatedAxis], (handleSizeActive - trackSize) / 2), (0, _defineProperty3.default)(_track, mainAxisOffsetProperty[calculatedAxis], 0), (0, _defineProperty3.default)(_track, mainAxisProperty[calculatedAxis], '100%'), (0, _defineProperty3.default)(_track, crossAxisProperty[calculatedAxis], trackSize), _track),\n    filledAndRemaining: (_filledAndRemaining = {\n      directionInvariant: true,\n      position: 'absolute'\n    }, (0, _defineProperty3.default)(_filledAndRemaining, crossAxisOffsetProperty, 0), (0, _defineProperty3.default)(_filledAndRemaining, crossAxisProperty[calculatedAxis], '100%'), (0, _defineProperty3.default)(_filledAndRemaining, 'transition', _transitions2.default.easeOut(null, 'margin')), _filledAndRemaining),\n    handle: (_handle = {\n      directionInvariant: true,\n      boxSizing: 'border-box',\n      position: 'absolute',\n      cursor: 'pointer',\n      pointerEvents: 'inherit'\n    }, (0, _defineProperty3.default)(_handle, crossAxisOffsetProperty[calculatedAxis], 0), (0, _defineProperty3.default)(_handle, mainAxisOffsetProperty[calculatedAxis], percent === 0 ? '0%' : percent * 100 + '%'), (0, _defineProperty3.default)(_handle, 'zIndex', 1), (0, _defineProperty3.default)(_handle, 'margin', {\n      x: trackSize / 2 + 'px 0 0 0',\n      'x-reverse': trackSize / 2 + 'px 0 0 0',\n      y: '0 0 0 ' + trackSize / 2 + 'px',\n      'y-reverse': '0 0 0 ' + trackSize / 2 + 'px'\n    }[calculatedAxis]), (0, _defineProperty3.default)(_handle, 'width', handleSize), (0, _defineProperty3.default)(_handle, 'height', handleSize), (0, _defineProperty3.default)(_handle, 'backgroundColor', selectionColor), (0, _defineProperty3.default)(_handle, 'backgroundClip', 'padding-box'), (0, _defineProperty3.default)(_handle, 'border', '0px solid transparent'), (0, _defineProperty3.default)(_handle, 'borderRadius', '50%'), (0, _defineProperty3.default)(_handle, 'transform', {\n      x: 'translate(-50%, -50%)',\n      'x-reverse': 'translate(50%, -50%)',\n      y: 'translate(-50%, 50%)',\n      'y-reverse': 'translate(-50%, -50%)'\n    }[calculatedAxis]), (0, _defineProperty3.default)(_handle, 'transition', _transitions2.default.easeOut('450ms', 'background') + ', ' + _transitions2.default.easeOut('450ms', 'border-color') + ', ' + _transitions2.default.easeOut('450ms', 'width') + ', ' + _transitions2.default.easeOut('450ms', 'height')), (0, _defineProperty3.default)(_handle, 'overflow', 'visible'), (0, _defineProperty3.default)(_handle, 'outline', 'none'), _handle),\n    handleWhenDisabled: {\n      boxSizing: 'content-box',\n      cursor: 'not-allowed',\n      backgroundColor: trackColor,\n      width: handleSizeDisabled,\n      height: handleSizeDisabled,\n      border: 'none'\n    },\n    handleWhenPercentZero: {\n      border: trackSize + 'px solid ' + handleColorZero,\n      backgroundColor: handleFillColor,\n      boxShadow: 'none'\n    },\n    handleWhenPercentZeroAndDisabled: {\n      cursor: 'not-allowed',\n      width: handleSizeDisabled,\n      height: handleSizeDisabled\n    },\n    handleWhenPercentZeroAndFocused: {\n      border: trackSize + 'px solid ' + trackColorSelected\n    },\n    handleWhenActive: {\n      width: handleSizeActive,\n      height: handleSizeActive\n    },\n    ripple: {\n      height: handleSize,\n      width: handleSize,\n      overflow: 'visible'\n    },\n    rippleWhenPercentZero: {\n      top: -trackSize,\n      left: -trackSize\n    },\n    rippleInner: {\n      height: '300%',\n      width: '300%',\n      top: -handleSize,\n      left: -handleSize\n    },\n    rippleColor: {\n      fill: percent === 0 ? handleColorZero : rippleColor\n    }\n  };\n  styles.filled = (0, _simpleAssign2.default)({}, styles.filledAndRemaining, (_objectAssign2 = {}, (0, _defineProperty3.default)(_objectAssign2, mainAxisOffsetProperty[calculatedAxis], 0), (0, _defineProperty3.default)(_objectAssign2, 'backgroundColor', disabled ? trackColor : selectionColor), (0, _defineProperty3.default)(_objectAssign2, mainAxisMarginFromEnd[calculatedAxis], fillGutter), (0, _defineProperty3.default)(_objectAssign2, mainAxisProperty[calculatedAxis], 'calc(' + percent * 100 + '%' + calcDisabledSpacing + ')'), _objectAssign2));\n  styles.remaining = (0, _simpleAssign2.default)({}, styles.filledAndRemaining, (_objectAssign3 = {}, (0, _defineProperty3.default)(_objectAssign3, reverseMainAxisOffsetProperty[calculatedAxis], 0), (0, _defineProperty3.default)(_objectAssign3, 'backgroundColor', (state.hovered || state.focused) && !disabled ? trackColorSelected : trackColor), (0, _defineProperty3.default)(_objectAssign3, mainAxisMarginFromStart[calculatedAxis], fillGutter), (0, _defineProperty3.default)(_objectAssign3, mainAxisProperty[calculatedAxis], 'calc(' + (1 - percent) * 100 + '%' + calcDisabledSpacing + ')'), _objectAssign3));\n  return styles;\n};\n\nvar Slider = function (_Component) {\n  (0, _inherits3.default)(Slider, _Component);\n\n  function Slider() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, Slider);\n\n    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Slider.__proto__ || (0, _getPrototypeOf2.default)(Slider)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      active: false,\n      dragging: false,\n      focused: false,\n      hovered: false,\n      value: 0\n    }, _this.track = null, _this.handle = null, _this.resolveValue = function (value, min, max) {\n      if (value > max) {\n        return max;\n      }\n\n      if (value < min) {\n        return min;\n      }\n\n      return value;\n    }, _this.handleKeyDown = function (event) {\n      var _this$props = _this.props,\n          axis = _this$props.axis,\n          min = _this$props.min,\n          max = _this$props.max,\n          step = _this$props.step;\n      var isRtl = _this.context.muiTheme.isRtl;\n      var calculatedAxis = calculateAxis(axis, isRtl);\n      var action = void 0;\n\n      switch ((0, _keycode2.default)(event)) {\n        case 'page down':\n        case 'down':\n          if (calculatedAxis === 'y-reverse') {\n            action = 'increase';\n          } else {\n            action = 'decrease';\n          }\n\n          break;\n\n        case 'left':\n          if (calculatedAxis === 'x-reverse') {\n            action = 'increase';\n          } else {\n            action = 'decrease';\n          }\n\n          break;\n\n        case 'page up':\n        case 'up':\n          if (calculatedAxis === 'y-reverse') {\n            action = 'decrease';\n          } else {\n            action = 'increase';\n          }\n\n          break;\n\n        case 'right':\n          if (calculatedAxis === 'x-reverse') {\n            action = 'decrease';\n          } else {\n            action = 'increase';\n          }\n\n          break;\n\n        case 'home':\n          action = 'min';\n          break;\n\n        case 'end':\n          action = 'max';\n          break;\n      }\n\n      if (action) {\n        var newValue = void 0; // Cancel scroll\n\n        event.preventDefault();\n\n        switch (action) {\n          case 'decrease':\n            newValue = _this.state.value - step;\n            break;\n\n          case 'increase':\n            newValue = _this.state.value + step;\n            break;\n\n          case 'min':\n            newValue = min;\n            break;\n\n          case 'max':\n            newValue = max;\n            break;\n        } // We need to use toFixed() because of float point errors.\n        // For example, 0.01 + 0.06 = 0.06999999999999999\n\n\n        newValue = _this.resolveValue(parseFloat(newValue.toFixed(5)), min, max);\n\n        if (_this.state.value !== newValue) {\n          _this.setState({\n            value: newValue\n          });\n\n          if (_this.props.onChange) {\n            _this.props.onChange(event, newValue);\n          }\n        }\n      }\n    }, _this.handleDragMouseMove = function (event) {\n      _this.onDragUpdate(event, 'mouse');\n    }, _this.handleTouchMove = function (event) {\n      _this.onDragUpdate(event, 'touch');\n    }, _this.handleMouseEnd = function (event) {\n      document.removeEventListener('mousemove', _this.handleDragMouseMove);\n      document.removeEventListener('mouseup', _this.handleMouseEnd);\n\n      _this.onDragStop(event);\n    }, _this.handleTouchEnd = function (event) {\n      document.removeEventListener('touchmove', _this.handleTouchMove);\n      document.removeEventListener('touchup', _this.handleTouchEnd);\n      document.removeEventListener('touchend', _this.handleTouchEnd);\n      document.removeEventListener('touchcancel', _this.handleTouchEnd);\n\n      _this.onDragStop(event);\n    }, _this.handleTouchStart = function (event) {\n      var _this$props2 = _this.props,\n          axis = _this$props2.axis,\n          disabled = _this$props2.disabled;\n      var isRtl = _this.context.muiTheme.isRtl;\n\n      if (disabled) {\n        return;\n      }\n\n      var calculatedAxis = calculateAxis(axis, isRtl);\n      var position = void 0;\n\n      if (isMouseControlInverted(calculatedAxis)) {\n        position = _this.getTrackOffset() - event.touches[0][mainAxisClientOffsetProperty[calculatedAxis]];\n      } else {\n        position = event.touches[0][mainAxisClientOffsetProperty[calculatedAxis]] - _this.getTrackOffset();\n      }\n\n      _this.setValueFromPosition(event, position);\n\n      document.addEventListener('touchmove', _this.handleTouchMove);\n      document.addEventListener('touchup', _this.handleTouchEnd);\n      document.addEventListener('touchend', _this.handleTouchEnd);\n      document.addEventListener('touchcancel', _this.handleTouchEnd);\n\n      _this.onDragStart(event); // Cancel scroll and context menu\n\n\n      event.preventDefault();\n    }, _this.handleFocus = function (event) {\n      _this.setState({\n        focused: true\n      });\n\n      if (_this.props.onFocus) {\n        _this.props.onFocus(event);\n      }\n    }, _this.handleBlur = function (event) {\n      _this.setState({\n        focused: false,\n        active: false\n      });\n\n      if (_this.props.onBlur) {\n        _this.props.onBlur(event);\n      }\n    }, _this.handleMouseDown = function (event) {\n      var _this$props3 = _this.props,\n          axis = _this$props3.axis,\n          disabled = _this$props3.disabled;\n      var isRtl = _this.context.muiTheme.isRtl;\n\n      if (disabled) {\n        return;\n      }\n\n      var calculatedAxis = calculateAxis(axis, isRtl);\n      var position = void 0;\n\n      if (isMouseControlInverted(calculatedAxis)) {\n        position = _this.getTrackOffset() - event[mainAxisClientOffsetProperty[calculatedAxis]];\n      } else {\n        position = event[mainAxisClientOffsetProperty[calculatedAxis]] - _this.getTrackOffset();\n      }\n\n      _this.setValueFromPosition(event, position);\n\n      document.addEventListener('mousemove', _this.handleDragMouseMove);\n      document.addEventListener('mouseup', _this.handleMouseEnd); // Cancel text selection\n\n      event.preventDefault(); // Set focus manually since we called preventDefault()\n\n      _this.handle.focus();\n\n      _this.onDragStart(event);\n    }, _this.handleMouseUp = function () {\n      if (!_this.props.disabled) {\n        _this.setState({\n          active: false\n        });\n      }\n    }, _this.handleMouseEnter = function () {\n      _this.setState({\n        hovered: true\n      });\n    }, _this.handleMouseLeave = function () {\n      _this.setState({\n        hovered: false\n      });\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  (0, _createClass3.default)(Slider, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      var _props = this.props,\n          defaultValue = _props.defaultValue,\n          min = _props.min,\n          max = _props.max;\n      var value = this.props.value;\n\n      if (value === undefined) {\n        value = defaultValue !== undefined ? defaultValue : min;\n      }\n\n      this.setState({\n        value: this.resolveValue(value, min, max)\n      });\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.value !== undefined && !this.state.dragging) {\n        var _nextProps$min = nextProps.min,\n            min = _nextProps$min === undefined ? this.props.min : _nextProps$min,\n            _nextProps$max = nextProps.max,\n            max = _nextProps$max === undefined ? this.props.max : _nextProps$max;\n        this.setState({\n          value: this.resolveValue(nextProps.value, min, max)\n        });\n      }\n    }\n  }, {\n    key: 'getValue',\n    value: function getValue() {\n      process.env.NODE_ENV !== \"production\" ? (0, _warning2.default)(false, 'Material-UI Slider: getValue() method is deprecated.\\n      Use the onChange callbacks instead.\\n      It will be removed with v0.17.0.') : void 0;\n      return this.state.value;\n    }\n  }, {\n    key: 'clearValue',\n    value: function clearValue() {\n      process.env.NODE_ENV !== \"production\" ? (0, _warning2.default)(false, 'Material-UI Slider: clearValue() method is deprecated.\\n      Use the value property to control the component instead.\\n      It will be removed with v0.17.0.') : void 0;\n      this.setState({\n        value: this.props.min\n      });\n    }\n  }, {\n    key: 'getTrackOffset',\n    value: function getTrackOffset() {\n      var axis = this.props.axis;\n      var isRtl = this.context.muiTheme.isRtl;\n      var calculatedAxis = calculateAxis(axis, isRtl);\n      if (!this.track) return 0;\n      return this.track.getBoundingClientRect()[mainAxisOffsetProperty[calculatedAxis]];\n    }\n  }, {\n    key: 'onDragStart',\n    value: function onDragStart(event) {\n      this.setState({\n        dragging: true,\n        active: true\n      });\n\n      if (this.props.onDragStart) {\n        this.props.onDragStart(event);\n      }\n    }\n  }, {\n    key: 'onDragUpdate',\n    value: function onDragUpdate(event, type) {\n      var _this2 = this;\n\n      var _props2 = this.props,\n          axis = _props2.axis,\n          disabled = _props2.disabled;\n      var isRtl = this.context.muiTheme.isRtl;\n\n      if (this.dragRunning) {\n        return;\n      }\n\n      this.dragRunning = true;\n      requestAnimationFrame(function () {\n        _this2.dragRunning = false;\n        var calculatedAxis = calculateAxis(axis, isRtl);\n        var source = type === 'touch' ? event.touches[0] : event;\n        var position = void 0;\n\n        if (isMouseControlInverted(calculatedAxis)) {\n          position = _this2.getTrackOffset() - source[mainAxisClientOffsetProperty[calculatedAxis]];\n        } else {\n          position = source[mainAxisClientOffsetProperty[calculatedAxis]] - _this2.getTrackOffset();\n        }\n\n        if (!disabled) {\n          _this2.setValueFromPosition(event, position);\n        }\n      });\n    }\n  }, {\n    key: 'onDragStop',\n    value: function onDragStop(event) {\n      this.setState({\n        dragging: false,\n        active: false\n      });\n\n      if (this.props.onDragStop) {\n        this.props.onDragStop(event);\n      }\n    }\n  }, {\n    key: 'setValueFromPosition',\n    value: function setValueFromPosition(event, position) {\n      var _props3 = this.props,\n          axis = _props3.axis,\n          step = _props3.step,\n          min = _props3.min,\n          max = _props3.max;\n      var isRtl = this.context.muiTheme.isRtl;\n      var calculatedAxis = calculateAxis(axis, isRtl);\n      var positionMax = this.track[mainAxisClientProperty[calculatedAxis]];\n      var value = void 0;\n\n      if (position <= 0) {\n        value = min;\n      } else if (position >= positionMax) {\n        value = max;\n      } else {\n        value = position / positionMax * (max - min);\n        value = Math.round(value / step) * step + min;\n        value = parseFloat(value.toFixed(5));\n      }\n\n      value = this.resolveValue(value, min, max);\n\n      if (this.state.value !== value) {\n        this.setState({\n          value: value\n        });\n\n        if (this.props.onChange) {\n          this.props.onChange(event, value);\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var _props4 = this.props,\n          axis = _props4.axis,\n          disabled = _props4.disabled,\n          disableFocusRipple = _props4.disableFocusRipple,\n          max = _props4.max,\n          min = _props4.min,\n          name = _props4.name,\n          onBlur = _props4.onBlur,\n          onChange = _props4.onChange,\n          onDragStart = _props4.onDragStart,\n          onDragStop = _props4.onDragStop,\n          onFocus = _props4.onFocus,\n          required = _props4.required,\n          sliderStyle = _props4.sliderStyle,\n          step = _props4.step,\n          style = _props4.style,\n          propValue = _props4.value,\n          other = (0, _objectWithoutProperties3.default)(_props4, ['axis', 'disabled', 'disableFocusRipple', 'max', 'min', 'name', 'onBlur', 'onChange', 'onDragStart', 'onDragStop', 'onFocus', 'required', 'sliderStyle', 'step', 'style', 'value']);\n      var _state = this.state,\n          active = _state.active,\n          focused = _state.focused,\n          hovered = _state.hovered,\n          value = _state.value;\n      var prepareStyles = this.context.muiTheme.prepareStyles;\n      var styles = getStyles(this.props, this.context, this.state);\n      var percent = getPercent(value, min, max);\n      var handleStyles = {};\n\n      if (percent === 0) {\n        handleStyles = (0, _simpleAssign2.default)({}, styles.handle, styles.handleWhenPercentZero, active && styles.handleWhenActive, (hovered || focused) && !disabled && styles.handleWhenPercentZeroAndFocused, disabled && styles.handleWhenPercentZeroAndDisabled);\n      } else {\n        handleStyles = (0, _simpleAssign2.default)({}, styles.handle, active && styles.handleWhenActive, disabled && styles.handleWhenDisabled);\n      }\n\n      var rippleStyle = (0, _simpleAssign2.default)({}, styles.ripple, percent === 0 && styles.rippleWhenPercentZero);\n      return _react2.default.createElement('div', (0, _extends3.default)({}, other, {\n        style: prepareStyles((0, _simpleAssign2.default)({}, style))\n      }), _react2.default.createElement('div', {\n        style: prepareStyles((0, _simpleAssign2.default)({}, styles.slider, sliderStyle)),\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        onMouseDown: this.handleMouseDown,\n        onMouseEnter: this.handleMouseEnter,\n        onMouseLeave: this.handleMouseLeave,\n        onMouseUp: this.handleMouseUp,\n        onTouchStart: this.handleTouchStart,\n        onKeyDown: !disabled ? this.handleKeyDown : undefined\n      }, _react2.default.createElement('div', {\n        ref: function ref(node) {\n          return _this3.track = node;\n        },\n        style: prepareStyles(styles.track)\n      }, _react2.default.createElement('div', {\n        style: prepareStyles(styles.filled)\n      }), _react2.default.createElement('div', {\n        style: prepareStyles(styles.remaining)\n      }), _react2.default.createElement('div', {\n        ref: function ref(node) {\n          return _this3.handle = node;\n        },\n        style: prepareStyles(handleStyles),\n        tabIndex: 0\n      }, !disabled && !disableFocusRipple && _react2.default.createElement(_FocusRipple2.default, {\n        style: rippleStyle,\n        innerStyle: styles.rippleInner,\n        show: (hovered || focused) && !active,\n        color: styles.rippleColor.fill\n      })))), _react2.default.createElement('input', {\n        type: 'hidden',\n        name: name,\n        value: value,\n        required: required,\n        min: min,\n        max: max,\n        step: step\n      }));\n    }\n  }]);\n  return Slider;\n}(_react.Component);\n\nSlider.defaultProps = {\n  axis: 'x',\n  disabled: false,\n  disableFocusRipple: false,\n  max: 1,\n  min: 0,\n  required: true,\n  step: 0.01,\n  style: {}\n};\nSlider.contextTypes = {\n  muiTheme: _propTypes2.default.object.isRequired\n};\nSlider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * The axis on which the slider will slide.\n   */\n  axis: _propTypes2.default.oneOf(['x', 'x-reverse', 'y', 'y-reverse']),\n\n  /**\n   * The default value of the slider.\n   */\n  defaultValue: valueInRangePropType,\n\n  /**\n   * Disables focus ripple if set to true.\n   */\n  disableFocusRipple: _propTypes2.default.bool,\n\n  /**\n   * If true, the slider will not be interactable.\n   */\n  disabled: _propTypes2.default.bool,\n\n  /**\n   * The maximum value the slider can slide to on\n   * a scale from 0 to 1 inclusive. Cannot be equal to min.\n   */\n  max: minMaxPropType,\n\n  /**\n   * The minimum value the slider can slide to on a scale\n   * from 0 to 1 inclusive. Cannot be equal to max.\n   */\n  min: minMaxPropType,\n\n  /**\n   * The name of the slider. Behaves like the name attribute\n   * of an input element.\n   */\n  name: _propTypes2.default.string,\n\n  /** @ignore */\n  onBlur: _propTypes2.default.func,\n\n  /**\n   * Callback function that is fired when the slider's value changed.\n   *\n   * @param {object} event KeyDown event targeting the slider.\n   * @param {number} newValue The new value of the slider.\n   */\n  onChange: _propTypes2.default.func,\n\n  /**\n   * Callback function that is fired when the slider has begun to move.\n   *\n   * @param {object} event MouseDown or TouchStart event targeting the slider.\n   */\n  onDragStart: _propTypes2.default.func,\n\n  /**\n   * Callback function that is fired when the slide has stopped moving.\n   *\n   * @param {object} event MouseEnd or TouchEnd event targeting the slider.\n   */\n  onDragStop: _propTypes2.default.func,\n\n  /** @ignore */\n  onFocus: _propTypes2.default.func,\n\n  /**\n   * Whether or not the slider is required in a form.\n   */\n  required: _propTypes2.default.bool,\n\n  /**\n   * Override the inline-styles of the inner slider element.\n   */\n  sliderStyle: _propTypes2.default.object,\n\n  /**\n   * The granularity the slider can step through values.\n   */\n  step: _propTypes2.default.number,\n\n  /**\n   * Override the inline-styles of the root element.\n   */\n  style: _propTypes2.default.object,\n\n  /**\n   * The value of the slider.\n   */\n  value: valueInRangePropType\n} : {};\nexports.default = Slider;","map":null,"metadata":{},"sourceType":"script"}