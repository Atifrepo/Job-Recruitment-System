{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.styles = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _withStyles = _interopRequireDefault(require(\"../styles/withStyles\"));\n\nvar _helpers = require(\"../utils/helpers\");\n\nvar RADIUS = 11;\n\nvar styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      display: 'inline-flex',\n      // For correct alignment with the text.\n      verticalAlign: 'middle'\n    },\n\n    /* Styles applied to the badge `span` element. */\n    badge: {\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      justifyContent: 'center',\n      alignContent: 'center',\n      alignItems: 'center',\n      position: 'absolute',\n      top: -RADIUS,\n      right: -RADIUS,\n      fontFamily: theme.typography.fontFamily,\n      fontWeight: theme.typography.fontWeight,\n      fontSize: theme.typography.pxToRem(12),\n      width: RADIUS * 2,\n      height: RADIUS * 2,\n      borderRadius: '50%',\n      backgroundColor: theme.palette.color,\n      color: theme.palette.textColor,\n      zIndex: 1 // Render the badge on top of potential ripples.\n\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      backgroundColor: theme.palette.primary.main,\n      color: theme.palette.primary.contrastText\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.secondary.contrastText\n    },\n\n    /* Styles applied to the root element if `color=\"error\"`. */\n    colorError: {\n      backgroundColor: theme.palette.error.main,\n      color: theme.palette.error.contrastText\n    }\n  };\n};\n\nexports.styles = styles;\n\nfunction Badge(props) {\n  var badgeContent = props.badgeContent,\n      children = props.children,\n      classes = props.classes,\n      classNameProp = props.className,\n      color = props.color,\n      ComponentProp = props.component,\n      other = (0, _objectWithoutProperties2.default)(props, [\"badgeContent\", \"children\", \"classes\", \"className\", \"color\", \"component\"]);\n  var badgeClassName = (0, _classnames.default)(classes.badge, (0, _defineProperty2.default)({}, classes[\"color\".concat((0, _helpers.capitalize)(color))], color !== 'default'));\n  return _react.default.createElement(ComponentProp, (0, _extends2.default)({\n    className: (0, _classnames.default)(classes.root, classNameProp)\n  }, other), children, _react.default.createElement(\"span\", {\n    className: badgeClassName\n  }, badgeContent));\n}\n\nBadge.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: _propTypes.default.node.isRequired,\n\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: _propTypes.default.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: _propTypes.default.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: _propTypes.default.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: _propTypes.default.oneOf(['default', 'primary', 'secondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func, _propTypes.default.object])\n} : {};\nBadge.defaultProps = {\n  color: 'default',\n  component: 'span'\n};\n\nvar _default = (0, _withStyles.default)(styles, {\n  name: 'MuiBadge'\n})(Badge);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}